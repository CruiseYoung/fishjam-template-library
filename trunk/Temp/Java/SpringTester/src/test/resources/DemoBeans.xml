<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:util="http://www.springframework.org/schema/util"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
        http://www.springframework.org/schema/util 
        http://www.springframework.org/schema/util/spring-util-3.2.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context-3.2.xsd
        ">
     
     <context:component-scan annotation-config="true" base-package="com.fishjam.springtester.*" >
        <!-- 可通过 include-filter/exclude-filter 调整扫描的过滤机制  -->
        <!-- context:include-filter type="regex" expression="*Test"/ -->
     </context:component-scan>
     <!-- 或用如下方式打开 使用注解配置Bean 的开关  <context:annotation-config />  -->
     
    <bean id="student" class="com.fishjam.springtester.domain.Student" >
        <constructor-arg value="999"></constructor-arg>   <!-- 类似的有 constructor-arg ref="xxx" -->
        <!-- property name="id" value="999" / -->
        <property name="name" value="fishjam" />            <!-- 通过 setName 方法给属性注入值，简单值用value,对象值用ref -->
        <property name="sex" value="male" />
        <!--property name="birthday" value="1979-03-30 00:00:00:000" / -->  <!-- value属性可以注入String、int、float、Double、boolean 等类型(TODO:时间？) -->
        
        <!-- 装配 集合类型的Bean属性( list, set, map, props 等), 对应Java中的 数组/Collection/Map/Properties 等类型的成员变量  -->
        <property name="actions">
            <list>   
                <bean class = "com.fishjam.springtester.domain.StudyAction" />  <!-- 此处使用了内部Bean的方式，可以通过 ref bean="xxx" 的方式应用其他公有bean -->
                <bean class ="com.fishjam.springtester.domain.PlayAction" />
            </list>
        </property>
    </bean>
    
    <!-- 定义JPA的信息 
    <bean id="emf" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean" >
        <property name="dataSource" ref="dataSource" />
        <property name="jpaVendorAdapter" ref="jpaVendorAdapter" />  //指定JPA厂商适配器
    </bean>
     -->
    
    <!-- 通过scope指定作用域prototype，表示每次请求时都产生一个新的实例 -->
    <bean id="beanLifeCycleDemo" class="com.fishjam.springtester.domain.BeanLifeCycleDemo" 
        scope="prototype" 
        init-method="callForInitMethod" destroy-method="callForDestroyMethod">
    </bean>
    
    <!-- 通过工厂方法创建单实例的mylog，通过 aop:aspect ref="mylog" 的方式，以 AOP 的方式进行自动调用 -->
    <bean id="mylog" class="com.fishjam.springtester.tools.MyLog"  factory-method="getInstance" />
    <!--bean id="mylog" class="com.fishjam.springtester.tools.MyLog"></bean-->
    
    <util:map id="myConfig">
        <entry key="autho" value="fishjam" />
        <entry key="java_home" value="#{systemEnvironment['JAVA_HOME']} " />
    </util:map>
    <!--
        <util:properties id="settings" location="classpath*:settings.properties" >
        </util:properties> 
        使用( 从中读取信息) : <property name="author" value="#{settings['Author']}" />
    -->
    
    <aop:config>
        <aop:aspect ref="mylog">
            <aop:pointcut id="doAction" expression="execution(* *.DoAction(..))"  />     <!-- 定义切入点，表示在执行 DoAction 前后等时机进行统治 -->
            <aop:before pointcut-ref="doAction" method="logBeforeAction" />           <!-- 声明前置通知 -->
            <aop:after pointcut-ref="doAction" method="logAfterAction" />                 <!-- 声明后置通知 -->
            <aop:around pointcut-ref="doAction" method="logElapseTime" />
        </aop:aspect>
        
        <aop:aspect>
            <!-- 通过切面引入新功能  -->
            <aop:declare-parents types-matching="com.fishjam.springtester.domain.Student+" 
                implement-interface="com.fishjam.springtester.tools.PerformanceCheck" 
                default-impl="com.fishjam.springtester.tools.DefaultPerformanceCheck"/>
        </aop:aspect>
    </aop:config>
    
</beans>
