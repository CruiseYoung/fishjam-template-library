package com.fishjam.spring.tester.framework;

import org.junit.Test;

import junit.framework.TestCase;

/*********************************************************************************************************
 * 为了降低Java开发的复杂性，Spring采取了以下关键策略：
 *   1.基于POJO的轻量级和最小侵入性编程 -- 不用继承框架的特定接口或类，能轻松切换框架
 *   2.通过依赖注入(DI)和面向接口实现松耦合；
 *   3.基于切面(AOP)和惯例进行声明式编程
 *     通过 <aop:config><aop:aspect><asp:pointcut> 等进行配置(切面、切入点), <aop:before>(前置通知); <aop:after>(后置通知)，
 *     这样可以在指定的方法调用前后，指定调用特殊的方法(比如日志记录等)，而对原有的方法不产生影响。
 *   4.通过切面和模版减少样板式代码(如使用 JdbcTemplate 封装JDBC数据库操作的代码);
 *    
 *  
**********************************************************************************************************/

public class FramewrokTester extends TestCase {
	@Test
	public void testFramework(){
		assertEquals(1, 1);
	}
	
	
	/**********************************************************************************************************
	 * 依赖注入(DI)
	 *   依赖注入的几种实现类型：
	 *   1.接口注入 -- 常常借助接口来将调用者与实现者分离，如 Context.lookup(ServletContext.getXXX);
	 *   2.构造器注入 -- 即通过构造函数完成依赖关系的设定
	 *   3.设值注入(使用最广泛) -- 通过配置属性，使用类的setter方法完成依赖关系的设置
	**********************************************************************************************************/
	@Test
	public void testDependencyInjection(){
		
	}
}
