#pragma once

/**********************************************************************************************************************
* 游戏服务器架构 
*   游戏从客户端来看一般都是分层次的(如 大区->服务器 或 Lobby->Hall->Room )，在此基础上进行负载分担,
*   
*   客户端 - 登录器(LoginServer) - 游戏服务器(GameServer)
*      
*   服务器群采用星状结构，以1个中心节点作为核心,然后向四周扩散出一些应用服务器
*   服务器：游戏服务器 + 数据Proxy + 真实的DbServer
*      CenterServer -- 管理所有的服务器连接
*      LoginServer(n)  -- 负责处理用户的登陆、注册，并且用来给用户传递游戏逻辑服务器列表等功能，并可完成负载均衡
*        1.N个大厅服务器的每一个大厅服务器都要与所有的登陆服务器保持连接，并实时地把本大厅服务器当前的同时在线人数通知给各个登陆服务器
*      GameServer   -- 逻辑服务器，根据不同的逻辑来实现不同的游戏需求
* 
* 
*   负载均衡: 除了具体的游戏逻辑服务器以外都是可以采用负载均衡
* 
* QQGame游戏分析
*   1.单机最高可容纳 3.5W人同时在线(为了稳定保持2W人容量) -- Linux下高性能的网络处理模型ePoll
*   2.共享内存方式高速完成进程间通讯 -- 线程池是否也可以使用类似方式(循环队列来维持Task?)
*   3.服务器的扩充方式不是平面的方式，而是裂变式的扩充方式，形成负载均衡阵列树状结构 -- ?
*   4.所 有的游戏服务器不是直接和数据库联系，而是和数据proxy进行联系 -- 游戏用户数据的分布存储
*
*
* 游戏服务器需要在异常处理方面下很多功夫
*   1.网络封包异常，分为两类:
*     封包格式异常 -- 最底端的网络数据包接收模块检查并处理
*     封包数据异常 -- 依靠游戏本身的逻辑去加以判定和检验
*   2.客户端和服务器要采用"互不信任原则"的方式设计和实现，从而避免 外挂、作弊软件等
**********************************************************************************************************************/


