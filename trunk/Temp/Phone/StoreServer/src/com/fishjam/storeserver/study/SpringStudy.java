package com.fishjam.storeserver.study;

/**************************************************************************************************************************************
 * 非侵入式设计(Spring) -- 无需继承框架提供的类(但通常需要使用Reflection机制，动态调用的方式来避免硬编码的约束)
 *   Class.forName("xxxx").newInstance();
 * 侵入设计(EJB) -- 需要继承框架类，如果以后想更换框架，之前写过的代码几乎无法重用
 * 
 * AOP(Aspect Oriented Programming) -- 面向切面编程，通过在编译期间、装载期间或运行期间实现在不修改源代码的情况下给程序动态添加功能的一种技术。
 *   即把可重用的功能(如 安全、日志记录、)提取出来，然后将这些通用功能在合适的时候织入到应用程序中
 * Bean -- 一般指容器管理对象，在Spring中指Spring IoC容器管理对象
 * Ioc(Inversion of Control) -- 控制反转(也称作 依赖注入：Dependency Injection，现实例子就是USB接口)。
 *   即由容器控制程序之间的关系，而非传统实现中的程序代码直接控制。即控制权由应用代码中转到了外部容器。
 * ORM() -- 
 * POJO(Plain Old Java Objects) -- 简单的Java对象，它可以包含业务逻辑或持久化逻辑，但不担当任何特殊角色且不继承或不实现任何其它Java框架的类或接口
**************************************************************************************************************************************/

/**************************************************************************************************************************************
 * Spring -- 基于IoC和AOP的构架多层j2ee系统的开发应用框架，用于简化企业级应用程序开发。
 *   1.通过配置文件来创建对象，管理对象之间依赖关系(不用修改源码或重新编译)
 *   2.还提供 通用日志记录、性能统计、安全控制、异常处理等“面向切面”的能力
 *   3.管理 数据库事务，供了一套简单的JDBC访问实现，对不同的数据访问技术提供了统一的接口,提供DAO（数据访问对象）支持。
 *     也可与第三方数据访问框架(如Hibernate)集成。
 *   4.Spring自身提供了一套非常强大的MVC框架，也可以非常容易的与第三方MVC框架(如 Struts,JF)集成，
 *   5.简化各种技术集成：提供对Java Mail、任务调度、JMX、JMS、JNDI、EJB、动态语言、远程访问、Web Service等的集成
 *   其真正的精华是 Ioc模式 实现的 BeanFactory 和 AOP 
 * Spring通过依赖注入模式，将依赖关系从编码中脱离出来，从而大大降低了组件之间的耦合，实现了组件真正意义上的即插即用。这也是Spring最具价值的特性之一。
 *
 * 依赖注入的几种实现类型：
 *   1.接口注入 -- 常常借助接口来将调用者与实现者分离，如 Context.lookup(ServletContext.getXXX);
 *   2.构造子注入 -- 即通过构造函数完成依赖关系的设定，
 *   3.设值注入(使用最广泛) -- 通过配置属性，使用类的setter方法完成依赖关系的设置
 * 
 * 缺点：
 *   1.使用人数不多、jsp中要写很多代码、控制器过于灵活，缺少一个公用控制器
 *
**************************************************************************************************************************************/
/**************************************************************************************************************************************
 * applicationContext.xml -- Bean工厂配置文件，ApplicationContext extends BeanFactory, 可通过 Action myAction=(Action)context.getBean("xxx")获得实例
 * <beans>
 *   <bean id="xxx" class="对应类的全名"> 
 *     <property name="属性名">   -- Spring读取该属性后，对应到Action中的setXxx()
 *       <value>属性值</value>
 *       <ref local="xxxx"/>  -- 可以指向前面定义的其他bean等？
 *     </property>
 *   </bean>
 * </beans>
 * 
 * TODO: bean.xml? 位于工作路径下(默认为项目根路径-- .project文件所在目录)，自定义的配置文件需要用 FileSystemXmlApplicationContext 加载?
 **************************************************************************************************************************************/

/**************************************************************************************************************************************
 * Spring.jar -- Spring 框架需要的包
 * log4j.properties -- Apache log4j作为日志输出组件,配置文件
**************************************************************************************************************************************/

/**************************************************************************************************************************************
 * 核心包和类
 *   .Spring
 *     BeanFactory -- 使用Reflection机制，为其依赖注入机制的实现基础。负责根据配置文件创建并维护Bean实例。
 *     BeanWrapper -- 使用示例: Object obj = Class.forName("net.xiaxin.beans.User").newInstance(); BeanWrapper bw = new BeanWrapperImpl(obj); 
 *                    bw.setPropertyValue("name","value");   等价于: new User().setName("value");
 *   .Apache
 *     BeanUtils
 *       setProperty(obj,"属性名","属性值");
**************************************************************************************************************************************/

public class SpringStudy {

}
