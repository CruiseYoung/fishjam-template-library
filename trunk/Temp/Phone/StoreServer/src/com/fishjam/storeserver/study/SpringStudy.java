package com.fishjam.storeserver.study;

/**************************************************************************************************************************************
 * 非侵入式设计 -- 无需继承框架提供的类
 * 侵入设计 -- 需要继承框架类，如果以后想更换框架之前写过的代码几乎无法重用
 * 
 * AOP(Aspect Oriented Programming) -- 面向切面编程，通过在编译期间、装载期间或运行期间实现在不修改源代码的情况下给程序动态添加功能的一种技术。
 *   即把可重用的功能(如 安全、日志记录、)提取出来，然后将这些通用功能在合适的时候织入到应用程序中
 * Bean -- 一般指容器管理对象，在Spring中指Spring IoC容器管理对象
 * Ioc(Inversion of Control) -- 控制反转(也称作 依赖注入：Dependency Injection)。即由容器控制程序之间的关系，而非传统实现中的程序代码直接控制
 * ORM() -- 
 * POJO(Plain Old Java Objects) -- 简单的Java对象，它可以包含业务逻辑或持久化逻辑，但不担当任何特殊角色且不继承或不实现任何其它Java框架的类或接口
**************************************************************************************************************************************/

/**************************************************************************************************************************************
 * Spring -- 基于IoC和AOP的构架多层j2ee系统的开发应用框架，用于简化企业级应用程序开发。
 *   1.通过配置文件来创建对象，管理对象之间依赖关系(不用修改源码或重新编译)
 *   2.还提供 通用日志记录、性能统计、安全控制、异常处理等“面向切面”的能力
 *   3.管理 数据库事务，供了一套简单的JDBC访问实现，对不同的数据访问技术提供了统一的接口,提供DAO（数据访问对象）支持。
 *     也可与第三方数据访问框架(如Hibernate)集成。
 *   4.Spring自身提供了一套非常强大的MVC框架，也可以非常容易的与第三方MVC框架(如 Struts,JF)集成，
 *   5.简化各种技术集成：提供对Java Mail、任务调度、JMX、JMS、JNDI、EJB、动态语言、远程访问、Web Service等的集成
 *   其真正的精华是 Ioc模式 实现的BeanFactory和 AOP 
 * 

 * 
 * 缺点：
 *   1.使用人数不多、jsp中要写很多代码、控制器过于灵活，缺少一个公用控制器
 *
**************************************************************************************************************************************/
/**************************************************************************************************************************************
 * applicationContext.xml -- Bean工厂配置文件，ApplicationContext extends BeanFactory
**************************************************************************************************************************************/

public class SpringStudy {

}
