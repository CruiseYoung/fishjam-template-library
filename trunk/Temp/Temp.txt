http://upload.blog.naver.com/upload/upload.nhn?blogId=
http://blog.naver.com/ToolbarPostWriteForm.nhn?blogId=
return: 0<@nhn@><@nhn@>452454<@nhn@>/20120524_36/fishjam2000_1337854375890_CLJ7L2_jpg<@nhn@>bleach_51_094.jpg<@nhn@>bleach_51_094.jpg<@nhn@>1931<@nhn@>1461

GenericHTTPClient

	HINTERNET m_hOpen;				// internet open handle
	HINTERNET m_hConnection;		// internet connection hadle
	HINTERNET m_hRequest;		// internet request hadle
	
	BOOL bRet = ::InternetGetCookie(IDS_LOGIN_COOKIE_DOMAIN, NULL, szCookie, &len); 
	m_hOpen = ::InternetOpen(IDS_LOGIN_HTTP_AGENT, INTERNET_OPEN_TYPE_PRECONFIG, NULL, NULL, 0) ;
	m_hConnect = ::InternetConnect(m_hOpen, IDS_BLOG_UPLOAD_URL, 80, NULL, NULL, INTERNET_SERVICE_HTTP, 0, 0);
	m_hRequest = ::HttpOpenRequest(m_hConnect, _T("POST"), IDS_BLOG_UPLOAD_PAGE_URL + strID, NULL, NULL, NULL,
								   INTERNET_FLAG_NO_CACHE_WRITE | INTERNET_FLAG_RELOAD, 0);
	
	//获取参数列表(比如 Content-Type、Accept、Content-Length、 User-Agent、Connection、Cookie 等)，循环发送出去?
	//  参数类型: 参数值
	while(...)
	{
		bRet = ::HttpAddRequestHeaders(m_hRequest, strHeader.GetBuffer(), strHeader.GetLength(), HTTP_ADDREQ_FLAG_ADD_IF_NEW);

	}

	INTERNET_BUFFERS InternetBufferIn = {0};
	InternetBufferIn.dwStructSize = sizeof(INTERNET_BUFFERS);
	InternetBufferIn.Next = NULL;

	bRet = ::HttpSendRequestEx(m_hRequest, &InternetBufferIn, NULL, HSR_INITIATE, 0);

	//循环 发送数据
	while(...)
	{
		DWORD dwOutPostBufferLength = 0;
		bRet = ::InternetWriteFile(m_hRequest, buffToPost.GetCurrentBuffer(), nBufferSize, &dwOutPostBufferLength);
	}
	
	bRet = ::HttpEndRequest(m_hRequest, NULL, HSR_INITIATE, 0);

	//获取结果
	const int RESPONSE_MAX_LENGTH = 1024;
	char byData[RESPONSE_MAX_LENGTH + 1];
	DWORD dwReadByte = 0;
	BOOL bRetVal = ::InternetReadFile(m_hRequest, byData, RESPONSE_MAX_LENGTH, &dwReadByte) ;

http://hi.baidu.com/xlrtx/blog/item/12c312332d07f8f01a4cff8b.html

协议 -- 三部分组成：协议头，具体内容以及协议尾， 必须是ASCII格式？
  协议类型：
  使用多个表单项（同时传?）传递数据(HTTP POST-MultiPartFormData)
    1. 使用 "Content-Type: multipart/form-data; boundary=--XXXXXXXXXXXX" 声明使用多表单分，且指定分割符号
       (可自定义，但一般使用的是 --MULTI-PARTS-FORM-DATA-BOUNDARY )
    2. 多个部分内容，有 Content-Disposition 和 Content-Type， 如(参数信息、二进制原始信息)，
       每一部分用 --{boundary} 分开(注意前面多两个 "--" )
    3. 使用 --{boundary}-- 表示结束(注意前后各多两个 "--" )
    
ffmpeg -- 开源且跨平台的音视频解决方案，是一套编解码的框架，具有采集、解码、流化等功能（http://www.ffmpeg.org/）
   模块
     ffmpeg -i 输入文件 输出文件 -- 视频文件转换命令行工具,也支持经过实时电视卡抓取和编码成视频文件
     ffserver -- 基于HTTP(RTSP正在开发中)用于实时广播的多媒体服务器.也支持时间平移 
     ffplay -- 用 SDL和FFmpeg库开发的一个简单的媒体播放器(需要先安装 SDL 库才能编译)
     libavcodec -- 包含了所有FFmpeg音视频编解码器的库.为了保证最优性能和高可复用性,大多数编解码器从头开发的
     libavformat -- 包含了所有的普通音视格式的解析器和产生器的库
     
  无法使用VC编译(实际上可以？)，只能用MSys+MinGW编译，但是编译出来的DLL是可以被VC使用的
     http://www.cnblogs.com/mcodec/articles/1659671.html -- 使用VC编译的方法
     http://ffmpeg.zeranoe.com/blog/  -- 自动下载和编译ffmpeg的脚本
  ./configure --enable-shared --disable-static --enable-memalign-hack --disable-yasm
     --enable-shared      编译动态库
     --disable-static     禁用静态库
     --enable-memalign-hack     启用内存对其，Windows下必须
     --enable-libx264     使用x264作为h264编码器,表示要使用第3方库x264,此时mingw include 和 lib内必须已经有x264.h和libx264.a
     --enable-libmp3lame     使用mp3lame作为mp3编码器（http://sourceforge.net/projects/lame/files/）
     --enable-gpl      遵循gpl协议,必须指定，因为x264是gpl协议
     --disable-debug   禁用调试信息
     --enable-small    启用文件最小功能
     
   编解码库（ffmpeg 只是一个框架，不同的编解码库在不同的网站？http://ffmpeg.zeranoe.com/builds/），
     可通过 --extra-cflags 来指定头文件的文件夹?
     libx264 
     libfaac 
     libmp3lame -- linux 下支持mp3
     libogg 
     libspeex 
     libvorbis 
     libtheora  
     
   源码分析
     Demuxer -- 媒体格式解码器
     struct AVCodec -- codec 的数据结构，全局变量 *first_avcodec, avcodec_register_all 方法注册全部 codec
     解码播放：Media -> ByteIOContext -> Demuxer -> Decode -> YUV -> Display
     格式转换：Media -> ByteIOContext -> Demuxer -> Decode -> YUV -> Encode -> Muxer -> ByteIOContex -> Media
       格式转换，如 文件类型从 .flv -> mp4
       编码类型，如 codec 从 mpeg4 -> H264
     媒体录制：YUV -> Encode -> Muxer -> ByteIOContex -> Media
       