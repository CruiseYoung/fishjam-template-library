package com.fishjam.study.javaee;
                                            	
/**************************************************************************************************************************************
 * 	<#if (listquotedpricepriceone.amount < buyerproducts.amount ) >xxxx</#if>
 * 文档 -- FreeMarker_Manual_zh_CN.pdf， P20
 * 
 * 编辑工具
 *    1.FreeMarker IDE -- 支持 语法高亮、内容辅助(Content Assist)、大纲视图(Outline View) 等
 *    2.FreeMarker Eclipse Plugin --
 *    
 * TODO:
 *   1.<#assign ages = {"Joe":23, "Fred":25} + {"Joe":30, "Julia":18}>  -- 连接哈希表，赋值给ages变量，键相同时右侧优先
 *   2.如果要生成HTML，强烈建议利用 escapse 指令来阻止跨站脚本攻击和非格式良好的HTML页面
 *      <#escape x as x?html> ... <#noescape>${book.description}</#noescape> ... </#escape>
 *   3. 如果FreeMarker引擎在传统兼容模式 -- 对应的有几种模式？
 *    
 * 最佳实践
 *    1.当生成HTML时，你最好将完整的模板放入到 escape 指令中， 从而阻止跨站脚本攻击和非格式良好的HTML页面
 *    2.开发调试时，最好将 <freemarkerSettings> 中的 template_update_delay 值设为0，表明每次更新文件后，刷新时立即生效。
 *      发布版本时，再将其值调大(如 1800)
**************************************************************************************************************************************/

/**************************************************************************************************************************************
* 配置
*   1. <bean id="freemarkerConfig" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer"
*       p:templateLoaderPath="/WEB-INF/ftl/" p:freemarkerSettings-ref="freemarkerSettings">
*          <property name="freemarkerVariables">
*               <map>
*                 <entry key="menu" value-ref="menuTools"/>   <== 配置FTL中 ${menu(Session.userinfo.roles)} 语法对应的 TemplateMethodModelEx 子类
*               </map>
*          </property>
*       </bean>
**************************************************************************************************************************************/

/**************************************************************************************************************************************
 * FreeMarker(freemarker.org) -- 模板 + 数据模型 = 输出
 *   一个用Java语言编写的模板引擎，它基于模板来生成文本输出(HTML页面)，主要作为表现层的实现技术，替代JSP。
 *   模板用servlet提供的数据动态地生成 HTML，Java对象通过插件式对象封装，以变量方式在模板中显示
 * 
 * 语法， 区分大小写
 *    ${插值表达式} -- 输出变量对应的(字符串)值。各级属性名之间用点来分隔， 可以在后面给出默认值， 如 ${user!"Anonymous"}
 *    ${变量名[序号]} -- 访问序列元素，0基址。
 *    FTL tags标签(以 # 开头) -- FreeMarker的指令，不会直接输出。
 *    <@用户自定义标签> --   
 *    注释 : <#-- 注释内容 -->， 不会在输出内容中显示
 *    条件表达式:  条件?真值:假值;
 *    转义符号: \l (小于号 <); \g(大于号 >); \a(和号 &); \xXXXX(16进制Unicode码，如 版权符号 \x00A9 )
 *    原生字符串(其中的反斜杠和 ${ 等被视为普通字符) -- r"字符串" , 如 ${r"C:\test\maven\"}
 *    日期时间
 *       日期 --
 *       时间 -- 
 *       日期-时间(时间戳) -- 
 *    容器
 *       哈希表{ "name1":value1, "name2":value2 } -- 通过 变量名.属性名 或 变量名["属性名"] 的方式访问
 *       序列[ 值1, 值2 ] -- 0基址，通过 <#list> 遍历，也可通过 序列名[start..end] 进行序列切分和访问(类似 Python ?)
 *       集(有限制的序列) -- 不能获取大小，不能通过索引访问，但可以通过 <#list> 指令遍历
 *    子程序 -- ${函数名(参数1, 参数2)} 
 *       方法 -- 来自于数据模型(反射了Java对象的方法)
 *       函数 -- 定义在模版内的
 *       用户自定义指令(标签) -- 输出的是标记(HTML等),  <@标签名 xxx> 标签内容 </@标签名>
 *       使用注意：三者在使用上比较像，没有太大的差别。经验上说，选取时的优先级： 标签 ->
 *       
 *    节点 -- 代表了树状结构中的一个节点，通常配合XML格式来处理
 *     
 * 常见问题
 *    1.FreeMaker 默认情况下不能引用不存在的变量，或Java中返回null的属性，否则会抛出 xxxx(TODO) 的异常?
 *      除非:a. 使用 "!" 提供默认值； b.<#if (变量名)??> xxxxx</#if> -- 如变量名存在的话执行其中的代码  
 *    2.空格剥离 -- FreeMaker默认会去除文本中多余的 空格、制表符、换行符 等，如要输出，必须使用 &nbsp;(空格) 等?
 *      strip_text 参数将从模版中删除所有顶级文本 ？ 
 *    3.通过 > 和 >= 进行比较时，需要将表达式放入括号中，否则 FreeMarker 会把它当成结束符。如 <#if (x > y) >xxxx</#if>
 *    
 * 替换（方括号）语法 -- 2.3.4 版本后才可用, 
 *    TODO: 1. 为什么要进行替换？避免和HTML标签冲突?
 *               2. 通过 [#ftl] 打开？ 
 *    指令和注释中用 [ 和 ] 来代替 < 和 >， 和默认语法(尖括号) 在一个模版中是互相排斥的
**************************************************************************************************************************************/

/**************************************************************************************************************************************
 * 特殊变量： .变量名， 
 *   .main -- 主命名空间
 *   .globals -- 访问数据模型中的变量，一般用于在变量名被同名局部变量隐藏的情况
 * 
 * 指令(directives) --  
 *    <#assign var="value"> -- 定义简单变量，可以从模版中的任何位置来访问
 *    <#local localVar="value"> -- 定义局部变量，只能在宏内访问
 *    <#global globalVar = "value"> -- ？是否有这个? 定义全局变量，在所有命名空间中都可见
 *    <#compress> -- 从生成的输出内容中移除空白的
 *    <#escapse> -- 会对其中的文本内容(通常是允许用户任意输入的文本)进行转换(如 <iframe> 转换为 &lt;iframe&gt; )，从而避免跨域攻击等。
 *    <#function> -
 *    <#ftl> -- 可以开启或关闭一些功能，如 剥离空白，
 *    <#if user=="fishjam"> 当条件为真时会显示的文本 <#else> xxxx </#if>， 判断保留字 true/false
 *    <#list 序列 as 变量名> ${变量名.属性} </#list> -- 使用列表遍历集合
 *    <#import> -- ?
 *    <#include “文件名"> -- 当前位置插入其他文件的内容，一般用于统一的页面头、脚布局。 TODO: 没有结束标志?
 *    <#macro myMacro> -- 定义宏
 *    <#noescape> -- 
 *    <#setting> -- 设置, 其下有 number_format, date_format, time_format, datetime_format等
 *    
 * 自定义指令
 *    1. 模版开发人员 -- 使用 macro 指令定义宏
 *        定义: <#macro myMacro param1 param2="default2"> xxxx </#macro>， 定义宏时可以通过 <#nested>表示嵌套内容，否则在使用时会忽略其值。
 *                可以定义多种类型的变量: a. 简单变量(<#assign); b. 局部变量(local);    
 *        使用: <@myMacro param1="value1">嵌套内容</@myMacro>
 *        TODO: <#nested > 中使用的循环变量的名称是在自定义指令的开始标记（<@...>）的参数后面通过分号确定的
 *    2. Java开发人员 -- 扩展 freemarker.template.TemplateDirectiveModel 类
 *    
 * 内建函数 -- 语法:  变量?函数名 , 如 ${user?upper_case} -- 返回user变量对应字符串的大写形式。
 *   通用
 *   Sequence(list 等)
 *     first -- 返回序列中第一个值
 *     last -- 返回序列中最后一个值
 *     reverse -- 将的现有顺序反转，即倒序排序
 *     size -- 返回序列中元素的个数
 *     sort -- 将序列中的对象转化为字符串后顺序排序
 *     sort_by(value) -- 按序列中对象的属性value进行排序
 *   Hash
 *     keys -- 返回hash里的所有key, 返回结果为sequence
 *     values -- 返回hash里的所有value, 返回结果为sequence
 *   字符串(String)
 *     cap_first/uncap_first -- 字符串的第一个字母变为 大/小 写形式
 *     capitalize -- 字符串中的所有的字母变为大写
 *     date/datetime -- 将字符串转换为日期, 如 <#assign date1="2009-10-12 9:28:20"?datetime("yyyy-MM-dd HH:mm:ss")>
 *     ends_with -- 判断某个字符串是否由某个子串结尾，返回布尔值
 *     length -- 获取字符串的长度?
 *     lower_case -- 字符串的小写形式
 *     substring(start, end) -- 截取子字符串,等价于 myStr[start..end] ?
 *     trim -- 去掉字符串首尾的空格
 *     time -- 
 *     upper_case -- 字符串的大写 形式
 *
 *     c -- 计算机格式(不会将数字转换为人易读取的格式) , 如 ${product.id?c} 
 *     html -- 字符串中所有的特殊HTML字符都需要用实体引用来代替(比如 < 替换为 &lt; )
 *     int -- 对数字取整
 *     string -- user?string[0], 这种语法取出 user 字符串中的第一个字符。TODO:转换为字符串，也可以设置数字、时间的转换规则。
 *       ${ (1==2) ? string("yes", "no") } -- 会打印出 "no"
 *       string('yyyy-MM-dd') -- 对日期类型进行进行格式化
 *    
 * 旧的内建函数(不推荐使用?)
 *     default(值) -- 提供缺省值 
 *     exists
 *     if_exists
 *    
 * 方法调用 -- ${myFun(param1, param2)}
**************************************************************************************************************************************/

/**************************************************************************************************************************************
创建自定义的库 ( lib/fjlib.ftl  )
<#macro copyright date>
  <p>Copyright (C) ${date} fishjam. All rights reserved.</p>
</#macro>
<#assign mail = "fishjam@163.com">

使用:
  <#import "/lib/fjlib.ftl" as fjlib >   <#-- 导入库文件，并命名为 fjlib 名称空间 -->
  <@fjlib.copyright date="2000 - 2014" />
  ${fjlib.mail)
**************************************************************************************************************************************/

/**************************************************************************************************************************************
标准的FTL文件格式
-------------------------------------------  2.3.4 以前的版本， 不支持替换（方括号）语法 -------------------------------------------
<#compress >
    <#escape x as x?html>
      <html xmlns="http://www.w3.org/1999/xhtml">
      </html>
      <script type="text/javascript">
         $(document).ready(function () {
           //jQuery 
         });
      </script>
    </#escape>
</#compress>
-------------------------------------------  2.3.4 以后的版本， 支持替换（方括号）语法 ) -------------------------------------------
[#ftl]


**************************************************************************************************************************************/

/**************************************************************************************************************************************
 * 程序开发( freemarker.template )
 *    Configuration -- 配置信息 
 *       getTemplate("test.ftl"); 获取模版
 *    .Template -- 模版
 *      process(root, out) -- 模版(this)关联数据模型(root)，输出到out中
 *    
 * 方法变量 -- ftl中使用Java中定义的方法
 *   1.Java实现 freemarker.template.TemplateMethodModelEx 接口， 如 class MenuTools implements TemplateMethodModelEx
 *   2.实现其 exec 方法，其执行的 list 参数为 ???, 返回 ???
 *   2.
**************************************************************************************************************************************/
public class FreeMarkerStudy {
	
}
