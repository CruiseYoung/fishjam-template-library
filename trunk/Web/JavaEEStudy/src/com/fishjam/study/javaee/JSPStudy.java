package com.fishjam.study.javaee;

/**************************************************************************************************************************************
 * 
 * Web表现层
 *   JSP -- 传统的JSP技术为Web表现层技术提供了灵活、丰富的功能支持，但过于凌乱的JSP Script也成为系统维护的头号大敌。
 *            会被Web服务器编译成Servlet( 基类 ? )。
 *          JSP 中将业务逻辑、数据逻辑、表现逻辑代码相混杂，代码重用性、系统可维护性极低。
 *          建议：以JSTL Core为基础，以及有限的、与业务逻辑无关的自定义Tag（或第三方Taglib）的JSP页面作为表现层解决方案.
 * 
 *   基于模板的Web表示层技术
 *     优点:
 *       1.在技术层面，将表现逻辑与业务逻辑相分离;
 *       2.页面美工只需专著关心模板的设计，而程序员则专注于业务逻辑的实现;
 *       3.如果需要，模板引擎可脱离Web容器单独运行,利于系统移植；
 *     典型例子：
 *       1.XSLT -- 基于XML的表现层模板技术，但缺乏好的开发工具(StylusStudio和XmlSpy)，调试困难，效率低
 *       2.Velocity -- Apache的子项目，目前最为成熟的模板支持实现
 *       3.FreeMarker -- 支持JSP TAG,有很多可用的Taglib，在生产效率和学习成本上更具优势
**************************************************************************************************************************************/

/**************************************************************************************************************************************
 * JSP -- 从开发角度而言，只允许使用TAG的JSP页面(不要写JS)，已经在很大程度上保证了页面表现逻辑与业务逻辑的分离。
 * 
 * JSP2.0
 *   Expression Language(EL)
 *     ${……} -- 定义了一个表达式，可是常量也可是具体的表达语句。如 ${logininfo.username}或 ${logininfo[username]}
 *
 * 
**************************************************************************************************************************************/

public class JSPStudy {

}
