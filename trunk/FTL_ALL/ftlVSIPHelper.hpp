#ifndef FTL_VSIP_HELPER_HPP
#define FTL_VSIP_HELPER_HPP
#pragma once

#ifdef USE_EXPORT
#  include "ftlVSIPHelper.h"
#endif
#include "ftlComDetect.h"

#include <stdidcmd.h>  //Visual Studio公开的所有命令的ID。
  //可见的（和不可见的）菜单项的ID以cmdid 开头，标准编辑器命令以ECMD_ 开头等

#pragma TODO(handle vsshlids and msobtnid)
#include <vsshlids.h>  //Visual Studio外壳提供的菜单命令的ID
//#include <msobtnid.h>  //Microsoft Office 中用到的命令的ID

#include <comutil.h>

namespace FTL
{
	BOOL CFVSIPUtils::IsVsHierarchyHasChildren(IVsHierarchy* pParent, VSITEMID ItemId)
	{
		BOOL bHasChild = FALSE;
		HRESULT hr = E_FAIL;

		CComVariant varExpandable;
		COM_VERIFY(pParent->GetProperty(ItemId, VSHPROPID_Expandable, &varExpandable ));
		if (SUCCEEDED(hr) && varExpandable.lVal != 0)
		{
			bHasChild = TRUE;
		}
		if (!bHasChild)
		{
			CComVariant varContainer;
			hr = pParent->GetProperty(ItemId, VSHPROPID_Container, &varContainer);
			if (SUCCEEDED(hr) && varContainer.bVal)
			{
				bHasChild = TRUE;
			}
		}
		return bHasChild;
	}

#ifdef FTL_DEBUG

	LPCTSTR CFVSIPUtils::GetVSHPropIdString(DWORD_PTR propId)
	{
		switch(propId)
		{
			//enum __VSHPROPID
			HANDLE_CASE_RETURN_STRING(VSHPROPID_Parent);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_FirstChild);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_NextSibling);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_Root);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_TypeGuid);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_SaveName);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_Caption);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_IconImgList);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_IconIndex);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_Expandable);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_ExpandByDefault);
			//HANDLE_CASE_RETURN_STRING(VSHPROPID_ProjectName);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_Name);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_IconHandle);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_OpenFolderIconHandle);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_OpenFolderIconIndex);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_CmdUIGuid);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_SelContainer);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_BrowseObject);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_AltHierarchy);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_AltItemid);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_ProjectDir);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_SortPriority);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_UserContext);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_EditLabel);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_ExtObject);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_ExtSelectedItem);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_StateIconIndex);
			//HANDLE_CASE_RETURN_STRING(VSHPROPID_ProjectType);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_TypeName);
			//HANDLE_CASE_RETURN_STRING(VSHPROPID_ReloadableProjectFile);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_HandlesOwnReload);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_ParentHierarchy);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_ParentHierarchyItemid);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_ItemDocCookie);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_Expanded);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_ConfigurationProvider);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_ImplantHierarchy);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_OwnerKey);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_StartupServices);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_FirstVisibleChild);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_NextVisibleSibling);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_IsHiddenItem);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_IsNonMemberItem);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_IsNonLocalStorage);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_StorageType);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_ItemSubType);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_OverlayIconIndex);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_DefaultNamespace);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_IsNonSearchable);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_IsFindInFilesForegroundOnly);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_CanBuildFromMemory);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_PreferredLanguageSID);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_ShowProjInSolutionPage);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_AllowEditInRunMode);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_IsNewUnsavedItem);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_ShowOnlyItemCaption);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_ProjectIDGuid);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_DesignerVariableNaming);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_DesignerFunctionVisibility);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_HasEnumerationSideEffects);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_DefaultEnableBuildProjectCfg);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_DefaultEnableDeployProjectCfg);

			//enum __VSHPROPID2
			HANDLE_CASE_RETURN_STRING(VSHPROPID_PropertyPagesCLSIDList);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_CfgPropertyPagesCLSIDList);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_ExtObjectCATID);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_BrowseObjectCATID);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_CfgBrowseObjectCATID);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_AddItemTemplatesGuid);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_ChildrenEnumerated);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_StatusBarClientText);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_DebuggeeProcessId);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_IsLinkFile);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_KeepAliveDocument);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_SupportsProjectDesigner);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_IntellisenseUnknown);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_IsUpgradeRequired);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_DesignerHiddenCodeGeneration);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_SuppressOutOfDateMessageOnBuild);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_Container);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_UseInnerHierarchyIconList);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_EnableDataSourceWindow);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_AppTitleBarTopHierarchyName);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_DebuggerSourcePaths);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_CategoryGuid);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_DisableApplicationSettings);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_ProjectDesignerEditor);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_PriorityPropertyPagesCLSIDList);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_NoDefaultNestedHierSorting);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_ExcludeFromExportItemTemplate);
			HANDLE_CASE_RETURN_STRING(VSHPROPID_SupportedMyApplicationTypes);
		default:
			FTLTRACEEX(FTL::tlError, TEXT("Unknown VSHPropId, %d\n"), propId);
			break;
		}
		return TEXT("Unknown");
	}

	LPCTSTR CFVSIPUtils::GetVSFPropIdIdString(DWORD_PTR propId)
	{
		switch(propId)
		{
			HANDLE_CASE_RETURN_STRING(VSFPROPID_Type);
			HANDLE_CASE_RETURN_STRING(VSFPROPID_DocView);
			HANDLE_CASE_RETURN_STRING(VSFPROPID_SPFrame);
			HANDLE_CASE_RETURN_STRING(VSFPROPID_SPProjContext);
			HANDLE_CASE_RETURN_STRING(VSFPROPID_Caption);
			HANDLE_CASE_RETURN_STRING(VSFPROPID_WindowState);
			HANDLE_CASE_RETURN_STRING(VSFPROPID_FrameMode);
			HANDLE_CASE_RETURN_STRING(VSFPROPID_IsWindowTabbed);
			HANDLE_CASE_RETURN_STRING(VSFPROPID_UserContext);
			HANDLE_CASE_RETURN_STRING(VSFPROPID_ViewHelper);
			HANDLE_CASE_RETURN_STRING(VSFPROPID_ShortCaption);
			HANDLE_CASE_RETURN_STRING(VSFPROPID_WindowHelpKeyword);
			HANDLE_CASE_RETURN_STRING(VSFPROPID_WindowHelpCmdText);
			HANDLE_CASE_RETURN_STRING(VSFPROPID_DocCookie);
			HANDLE_CASE_RETURN_STRING(VSFPROPID_OwnerCaption);
			HANDLE_CASE_RETURN_STRING(VSFPROPID_EditorCaption);
			HANDLE_CASE_RETURN_STRING(VSFPROPID_pszMkDocument);
			HANDLE_CASE_RETURN_STRING(VSFPROPID_DocData);
			HANDLE_CASE_RETURN_STRING(VSFPROPID_Hierarchy);
			HANDLE_CASE_RETURN_STRING(VSFPROPID_ItemID);
			HANDLE_CASE_RETURN_STRING(VSFPROPID_CmdUIGuid);
			HANDLE_CASE_RETURN_STRING(VSFPROPID_CreateDocWinFlags);
			HANDLE_CASE_RETURN_STRING(VSFPROPID_guidEditorType);
			HANDLE_CASE_RETURN_STRING(VSFPROPID_pszPhysicalView);
			HANDLE_CASE_RETURN_STRING(VSFPROPID_InheritKeyBindings);
			HANDLE_CASE_RETURN_STRING(VSFPROPID_RDTDocData);
			HANDLE_CASE_RETURN_STRING(VSFPROPID_AltDocData);
			HANDLE_CASE_RETURN_STRING(VSFPROPID_GuidPersistenceSlot);
			HANDLE_CASE_RETURN_STRING(VSFPROPID_GuidAutoActivate);
			HANDLE_CASE_RETURN_STRING(VSFPROPID_CreateToolWinFlags);
			HANDLE_CASE_RETURN_STRING(VSFPROPID_ExtWindowObject);
			HANDLE_CASE_RETURN_STRING(VSFPROPID_MultiInstanceToolNum);
			HANDLE_CASE_RETURN_STRING(VSFPROPID_BitmapResource);
			HANDLE_CASE_RETURN_STRING(VSFPROPID_BitmapIndex);
			HANDLE_CASE_RETURN_STRING(VSFPROPID_ToolbarHost);
			HANDLE_CASE_RETURN_STRING(VSFPROPID_HideToolwinContainer);
		default:
			FTLTRACEEX(FTL::tlError, TEXT("Unknown VSFPropId, %d\n"), propId);
			break;
		}
		return TEXT("Unknown");
	}

    LPCTSTR CFVSIPUtils::GetStdIdCommandtring(ULONG cmdID)
    {
        switch(cmdID)
        {
            HANDLE_CASE_RETURN_STRING(ECMD_TYPECHAR);
            HANDLE_CASE_RETURN_STRING(ECMD_BACKSPACE);
            HANDLE_CASE_RETURN_STRING(ECMD_RETURN);
            HANDLE_CASE_RETURN_STRING(ECMD_TAB);
            HANDLE_CASE_RETURN_STRING(ECMD_BACKTAB);
            HANDLE_CASE_RETURN_STRING(ECMD_DELETE);
            HANDLE_CASE_RETURN_STRING(ECMD_LEFT);
            HANDLE_CASE_RETURN_STRING(ECMD_LEFT_EXT);
            HANDLE_CASE_RETURN_STRING(ECMD_RIGHT);
            HANDLE_CASE_RETURN_STRING(ECMD_RIGHT_EXT);
            HANDLE_CASE_RETURN_STRING(ECMD_UP);
            HANDLE_CASE_RETURN_STRING(ECMD_UP_EXT);
            HANDLE_CASE_RETURN_STRING(ECMD_DOWN);
            HANDLE_CASE_RETURN_STRING(ECMD_DOWN_EXT);
            HANDLE_CASE_RETURN_STRING(ECMD_HOME);
            HANDLE_CASE_RETURN_STRING(ECMD_HOME_EXT);
            HANDLE_CASE_RETURN_STRING(ECMD_END);
            HANDLE_CASE_RETURN_STRING(ECMD_END_EXT);
            HANDLE_CASE_RETURN_STRING(ECMD_BOL);
            HANDLE_CASE_RETURN_STRING(ECMD_BOL_EXT);
            HANDLE_CASE_RETURN_STRING(ECMD_FIRSTCHAR);
            HANDLE_CASE_RETURN_STRING(ECMD_FIRSTCHAR_EXT);
            HANDLE_CASE_RETURN_STRING(ECMD_EOL);
            HANDLE_CASE_RETURN_STRING(ECMD_EOL_EXT);
            HANDLE_CASE_RETURN_STRING(ECMD_LASTCHAR);
            HANDLE_CASE_RETURN_STRING(ECMD_LASTCHAR_EXT);
            HANDLE_CASE_RETURN_STRING(ECMD_PAGEUP);
            HANDLE_CASE_RETURN_STRING(ECMD_PAGEUP_EXT);
            HANDLE_CASE_RETURN_STRING(ECMD_PAGEDN);
            HANDLE_CASE_RETURN_STRING(ECMD_PAGEDN_EXT);
            HANDLE_CASE_RETURN_STRING(ECMD_TOPLINE);
            HANDLE_CASE_RETURN_STRING(ECMD_TOPLINE_EXT);
            HANDLE_CASE_RETURN_STRING(ECMD_BOTTOMLINE);
            HANDLE_CASE_RETURN_STRING(ECMD_BOTTOMLINE_EXT);
            HANDLE_CASE_RETURN_STRING(ECMD_SCROLLUP);
            HANDLE_CASE_RETURN_STRING(ECMD_SCROLLDN);
            HANDLE_CASE_RETURN_STRING(ECMD_SCROLLPAGEUP);
            HANDLE_CASE_RETURN_STRING(ECMD_SCROLLPAGEDN);
            HANDLE_CASE_RETURN_STRING(ECMD_SCROLLLEFT);
            HANDLE_CASE_RETURN_STRING(ECMD_SCROLLRIGHT);
            HANDLE_CASE_RETURN_STRING(ECMD_SCROLLBOTTOM);
            HANDLE_CASE_RETURN_STRING(ECMD_SCROLLCENTER);
            HANDLE_CASE_RETURN_STRING(ECMD_SCROLLTOP);
            HANDLE_CASE_RETURN_STRING(ECMD_SELECTALL);
            HANDLE_CASE_RETURN_STRING(ECMD_SELTABIFY);
            HANDLE_CASE_RETURN_STRING(ECMD_SELUNTABIFY);
            HANDLE_CASE_RETURN_STRING(ECMD_SELLOWCASE);
            HANDLE_CASE_RETURN_STRING(ECMD_SELUPCASE);
            HANDLE_CASE_RETURN_STRING(ECMD_SELTOGGLECASE);
            HANDLE_CASE_RETURN_STRING(ECMD_SELTITLECASE);
            HANDLE_CASE_RETURN_STRING(ECMD_SELSWAPANCHOR);
            HANDLE_CASE_RETURN_STRING(ECMD_GOTOLINE);
            HANDLE_CASE_RETURN_STRING(ECMD_GOTOBRACE);
            HANDLE_CASE_RETURN_STRING(ECMD_GOTOBRACE_EXT);
            HANDLE_CASE_RETURN_STRING(ECMD_GOBACK);
            HANDLE_CASE_RETURN_STRING(ECMD_SELECTMODE);
            HANDLE_CASE_RETURN_STRING(ECMD_TOGGLE_OVERTYPE_MODE);
            HANDLE_CASE_RETURN_STRING(ECMD_CUT);
            HANDLE_CASE_RETURN_STRING(ECMD_COPY);
            HANDLE_CASE_RETURN_STRING(ECMD_PASTE);
            HANDLE_CASE_RETURN_STRING(ECMD_CUTLINE);
            HANDLE_CASE_RETURN_STRING(ECMD_DELETELINE);
            HANDLE_CASE_RETURN_STRING(ECMD_DELETEBLANKLINES);
            HANDLE_CASE_RETURN_STRING(ECMD_DELETEWHITESPACE);
            HANDLE_CASE_RETURN_STRING(ECMD_DELETETOEOL);
            HANDLE_CASE_RETURN_STRING(ECMD_DELETETOBOL);
            HANDLE_CASE_RETURN_STRING(ECMD_OPENLINEABOVE);
            HANDLE_CASE_RETURN_STRING(ECMD_OPENLINEBELOW);
            HANDLE_CASE_RETURN_STRING(ECMD_INDENT);
            HANDLE_CASE_RETURN_STRING(ECMD_UNINDENT);
            HANDLE_CASE_RETURN_STRING(ECMD_UNDO);
            HANDLE_CASE_RETURN_STRING(ECMD_UNDONOMOVE);
            HANDLE_CASE_RETURN_STRING(ECMD_REDO);
            HANDLE_CASE_RETURN_STRING(ECMD_REDONOMOVE);
            HANDLE_CASE_RETURN_STRING(ECMD_DELETEALLTEMPBOOKMARKS);
            HANDLE_CASE_RETURN_STRING(ECMD_TOGGLETEMPBOOKMARK);
            HANDLE_CASE_RETURN_STRING(ECMD_GOTONEXTBOOKMARK);
            HANDLE_CASE_RETURN_STRING(ECMD_GOTOPREVBOOKMARK);
            HANDLE_CASE_RETURN_STRING(ECMD_FIND);
            HANDLE_CASE_RETURN_STRING(ECMD_REPLACE);
            HANDLE_CASE_RETURN_STRING(ECMD_REPLACE_ALL);
            HANDLE_CASE_RETURN_STRING(ECMD_FINDNEXT);
            HANDLE_CASE_RETURN_STRING(ECMD_FINDNEXTWORD);
            HANDLE_CASE_RETURN_STRING(ECMD_FINDPREV);
            HANDLE_CASE_RETURN_STRING(ECMD_FINDPREVWORD);
            HANDLE_CASE_RETURN_STRING(ECMD_FINDAGAIN);
            HANDLE_CASE_RETURN_STRING(ECMD_TRANSPOSECHAR);
            HANDLE_CASE_RETURN_STRING(ECMD_TRANSPOSEWORD);
            HANDLE_CASE_RETURN_STRING(ECMD_TRANSPOSELINE);
            HANDLE_CASE_RETURN_STRING(ECMD_SELECTCURRENTWORD);
            HANDLE_CASE_RETURN_STRING(ECMD_DELETEWORDRIGHT);
            HANDLE_CASE_RETURN_STRING(ECMD_DELETEWORDLEFT);
            HANDLE_CASE_RETURN_STRING(ECMD_WORDPREV);
            HANDLE_CASE_RETURN_STRING(ECMD_WORDPREV_EXT);
            HANDLE_CASE_RETURN_STRING(ECMD_WORDNEXT);
            HANDLE_CASE_RETURN_STRING(ECMD_WORDNEXT_EXT);
            HANDLE_CASE_RETURN_STRING(ECMD_COMMENTBLOCK);
            HANDLE_CASE_RETURN_STRING(ECMD_UNCOMMENTBLOCK);
            HANDLE_CASE_RETURN_STRING(ECMD_SETREPEATCOUNT);
            HANDLE_CASE_RETURN_STRING(ECMD_WIDGETMARGIN_LBTNDOWN);
            HANDLE_CASE_RETURN_STRING(ECMD_SHOWCONTEXTMENU);
            HANDLE_CASE_RETURN_STRING(ECMD_CANCEL);
            HANDLE_CASE_RETURN_STRING(ECMD_PARAMINFO);
            HANDLE_CASE_RETURN_STRING(ECMD_TOGGLEVISSPACE);
            HANDLE_CASE_RETURN_STRING(ECMD_TOGGLECARETPASTEPOS);
            HANDLE_CASE_RETURN_STRING(ECMD_COMPLETEWORD);
            HANDLE_CASE_RETURN_STRING(ECMD_SHOWMEMBERLIST);
            HANDLE_CASE_RETURN_STRING(ECMD_FIRSTNONWHITEPREV);
            HANDLE_CASE_RETURN_STRING(ECMD_FIRSTNONWHITENEXT);
            HANDLE_CASE_RETURN_STRING(ECMD_HELPKEYWORD);
            HANDLE_CASE_RETURN_STRING(ECMD_FORMATSELECTION);
            HANDLE_CASE_RETURN_STRING(ECMD_OPENURL);
            HANDLE_CASE_RETURN_STRING(ECMD_INSERTFILE);
            HANDLE_CASE_RETURN_STRING(ECMD_TOGGLESHORTCUT);
            HANDLE_CASE_RETURN_STRING(ECMD_QUICKINFO);
            HANDLE_CASE_RETURN_STRING(ECMD_LEFT_EXT_COL);
            HANDLE_CASE_RETURN_STRING(ECMD_RIGHT_EXT_COL);
            HANDLE_CASE_RETURN_STRING(ECMD_UP_EXT_COL);
            HANDLE_CASE_RETURN_STRING(ECMD_DOWN_EXT_COL);
            HANDLE_CASE_RETURN_STRING(ECMD_TOGGLEWORDWRAP);
            HANDLE_CASE_RETURN_STRING(ECMD_ISEARCH);
            HANDLE_CASE_RETURN_STRING(ECMD_ISEARCHBACK);
            HANDLE_CASE_RETURN_STRING(ECMD_BOL_EXT_COL);
            HANDLE_CASE_RETURN_STRING(ECMD_EOL_EXT_COL);
            HANDLE_CASE_RETURN_STRING(ECMD_WORDPREV_EXT_COL);
            HANDLE_CASE_RETURN_STRING(ECMD_WORDNEXT_EXT_COL);
            HANDLE_CASE_RETURN_STRING(ECMD_OUTLN_HIDE_SELECTION);
            HANDLE_CASE_RETURN_STRING(ECMD_OUTLN_TOGGLE_CURRENT);
            HANDLE_CASE_RETURN_STRING(ECMD_OUTLN_TOGGLE_ALL);
            HANDLE_CASE_RETURN_STRING(ECMD_OUTLN_STOP_HIDING_ALL);
            HANDLE_CASE_RETURN_STRING(ECMD_OUTLN_STOP_HIDING_CURRENT);
            HANDLE_CASE_RETURN_STRING(ECMD_OUTLN_COLLAPSE_TO_DEF);
            HANDLE_CASE_RETURN_STRING(ECMD_DOUBLECLICK);
            HANDLE_CASE_RETURN_STRING(ECMD_EXTERNALLY_HANDLED_WIDGET_CLICK);
            HANDLE_CASE_RETURN_STRING(ECMD_COMMENT_BLOCK);
            HANDLE_CASE_RETURN_STRING(ECMD_UNCOMMENT_BLOCK);
            HANDLE_CASE_RETURN_STRING(ECMD_OPENFILE);
            HANDLE_CASE_RETURN_STRING(ECMD_NAVIGATETOURL);

            // For editor internal use only
            HANDLE_CASE_RETURN_STRING(ECMD_HANDLEIMEMESSAGE);
            HANDLE_CASE_RETURN_STRING(ECMD_SELTOGOBACK);
            HANDLE_CASE_RETURN_STRING(ECMD_COMPLETION_HIDE_ADVANCED);

            HANDLE_CASE_RETURN_STRING(ECMD_FORMATDOCUMENT);
            HANDLE_CASE_RETURN_STRING(ECMD_OUTLN_START_AUTOHIDING);
            HANDLE_CASE_RETURN_STRING(ECMD_INCREASEFILTER);
            HANDLE_CASE_RETURN_STRING(ECMD_DECREASEFILTER);
            HANDLE_CASE_RETURN_STRING(ECMD_SMARTTASKS);
            HANDLE_CASE_RETURN_STRING(ECMD_COPYTIP);
            HANDLE_CASE_RETURN_STRING(ECMD_PASTETIP);
            HANDLE_CASE_RETURN_STRING(ECMD_LEFTCLICK);
            HANDLE_CASE_RETURN_STRING(ECMD_GOTONEXTBOOKMARKINDOC);
            HANDLE_CASE_RETURN_STRING(ECMD_GOTOPREVBOOKMARKINDOC);
            HANDLE_CASE_RETURN_STRING(ECMD_INVOKESNIPPETFROMSHORTCUT);

            // For managed language services internal use only (clovett)
            HANDLE_CASE_RETURN_STRING(ECMD_AUTOCOMPLETE);
            HANDLE_CASE_RETURN_STRING(ECMD_INVOKESNIPPETPICKER2);
            HANDLE_CASE_RETURN_STRING(ECMD_DELETEALLBOOKMARKSINDOC);
            HANDLE_CASE_RETURN_STRING(ECMD_CONVERTTABSTOSPACES);
            HANDLE_CASE_RETURN_STRING(ECMD_CONVERTSPACESTOTABS);

            // Last Standard Editor Command (+1)
            HANDLE_CASE_RETURN_STRING(ECMD_FINAL);

            // Some new commands created during CTC file rationalisation
            HANDLE_CASE_RETURN_STRING(ECMD_STOP);
            HANDLE_CASE_RETURN_STRING(ECMD_REVERSECANCEL);
            HANDLE_CASE_RETURN_STRING(ECMD_SLNREFRESH);
            HANDLE_CASE_RETURN_STRING(ECMD_SAVECOPYOFITEMAS);

            // Shareable commands originating in the HTML editor
            // Shared table commands are obsolete! If you still rely on them, please contact jbresler or mikhaila on
            // the HTML editor team
            HANDLE_CASE_RETURN_STRING(ECMD_NEWELEMENT);
            HANDLE_CASE_RETURN_STRING(ECMD_NEWATTRIBUTE);
            HANDLE_CASE_RETURN_STRING(ECMD_NEWCOMPLEXTYPE);
            HANDLE_CASE_RETURN_STRING(ECMD_NEWSIMPLETYPE);
            HANDLE_CASE_RETURN_STRING(ECMD_NEWGROUP);
            HANDLE_CASE_RETURN_STRING(ECMD_NEWATTRIBUTEGROUP);
            HANDLE_CASE_RETURN_STRING(ECMD_NEWKEY);
            HANDLE_CASE_RETURN_STRING(ECMD_NEWRELATION);
            HANDLE_CASE_RETURN_STRING(ECMD_EDITKEY);
            HANDLE_CASE_RETURN_STRING(ECMD_EDITRELATION);
            HANDLE_CASE_RETURN_STRING(ECMD_MAKETYPEGLOBAL);
            HANDLE_CASE_RETURN_STRING(ECMD_PREVIEWDATASET);
            HANDLE_CASE_RETURN_STRING(ECMD_GENERATEDATASET);
            HANDLE_CASE_RETURN_STRING(ECMD_CREATESCHEMA);
            HANDLE_CASE_RETURN_STRING(ECMD_LAYOUTINDENT);
            HANDLE_CASE_RETURN_STRING(ECMD_LAYOUTUNINDENT);
            HANDLE_CASE_RETURN_STRING(ECMD_REMOVEHANDLER);
            HANDLE_CASE_RETURN_STRING(ECMD_EDITHANDLER);
            HANDLE_CASE_RETURN_STRING(ECMD_ADDHANDLER);
            HANDLE_CASE_RETURN_STRING(ECMD_FONTSTYLE);
            HANDLE_CASE_RETURN_STRING(ECMD_FONTSTYLEGETLIST);
            HANDLE_CASE_RETURN_STRING(ECMD_PASTEASHTML);
            HANDLE_CASE_RETURN_STRING(ECMD_VIEWBORDERS);
            HANDLE_CASE_RETURN_STRING(ECMD_VIEWDETAILS);
            HANDLE_CASE_RETURN_STRING(ECMD_INSERTTABLE);
            HANDLE_CASE_RETURN_STRING(ECMD_INSERTCOLLEFT);
            HANDLE_CASE_RETURN_STRING(ECMD_INSERTCOLRIGHT);
            HANDLE_CASE_RETURN_STRING(ECMD_INSERTROWABOVE);
            HANDLE_CASE_RETURN_STRING(ECMD_INSERTROWBELOW);
            HANDLE_CASE_RETURN_STRING(ECMD_DELETETABLE);
            HANDLE_CASE_RETURN_STRING(ECMD_DELETECOLS);
            HANDLE_CASE_RETURN_STRING(ECMD_DELETEROWS);
            HANDLE_CASE_RETURN_STRING(ECMD_SELECTTABLE);
            HANDLE_CASE_RETURN_STRING(ECMD_SELECTTABLECOL);
            HANDLE_CASE_RETURN_STRING(ECMD_SELECTTABLEROW);
            HANDLE_CASE_RETURN_STRING(ECMD_SELECTTABLECELL);
            HANDLE_CASE_RETURN_STRING(ECMD_MERGECELLS);
            HANDLE_CASE_RETURN_STRING(ECMD_SPLITCELL);
            HANDLE_CASE_RETURN_STRING(ECMD_INSERTCELLLEFT);
            HANDLE_CASE_RETURN_STRING(ECMD_DELETECELLS);
            HANDLE_CASE_RETURN_STRING(ECMD_SHOWGRID);
            HANDLE_CASE_RETURN_STRING(ECMD_SNAPTOGRID);
            HANDLE_CASE_RETURN_STRING(ECMD_BOOKMARK);
            HANDLE_CASE_RETURN_STRING(ECMD_HYPERLINK);

            HANDLE_CASE_RETURN_STRING(ECMD_BULLETEDLIST);
            HANDLE_CASE_RETURN_STRING(ECMD_NUMBEREDLIST);
            HANDLE_CASE_RETURN_STRING(ECMD_EDITSCRIPT);
            HANDLE_CASE_RETURN_STRING(ECMD_EDITCODEBEHIND);
            HANDLE_CASE_RETURN_STRING(ECMD_DOCOUTLINEHTML);

            HANDLE_CASE_RETURN_STRING(ECMD_RUNATSERVER);
            HANDLE_CASE_RETURN_STRING(ECMD_WEBFORMSVERBS);
            HANDLE_CASE_RETURN_STRING(ECMD_WEBFORMSTEMPLATES);
            HANDLE_CASE_RETURN_STRING(ECMD_ENDTEMPLATE);
            HANDLE_CASE_RETURN_STRING(ECMD_EDITDEFAULTEVENT);
            HANDLE_CASE_RETURN_STRING(ECMD_SUPERSCRIPT);
            HANDLE_CASE_RETURN_STRING(ECMD_SUBSCRIPT);
            HANDLE_CASE_RETURN_STRING(ECMD_EDITSTYLE);
            HANDLE_CASE_RETURN_STRING(ECMD_ADDIMAGEHEIGHTWIDTH);
            HANDLE_CASE_RETURN_STRING(ECMD_REMOVEIMAGEHEIGHTWIDTH);
            HANDLE_CASE_RETURN_STRING(ECMD_LOCKELEMENT);
            HANDLE_CASE_RETURN_STRING(ECMD_AUTOCLOSEOVERRIDE);
            HANDLE_CASE_RETURN_STRING(ECMD_NEWANY);
            HANDLE_CASE_RETURN_STRING(ECMD_NEWANYATTRIBUTE);
            HANDLE_CASE_RETURN_STRING(ECMD_DELETEKEY);
            HANDLE_CASE_RETURN_STRING(ECMD_AUTOARRANGE);
            HANDLE_CASE_RETURN_STRING(ECMD_VALIDATESCHEMA);
            HANDLE_CASE_RETURN_STRING(ECMD_NEWFACET);
            HANDLE_CASE_RETURN_STRING(ECMD_VALIDATEXMLDATA);
            HANDLE_CASE_RETURN_STRING(ECMD_DOCOUTLINETOGGLE);
            HANDLE_CASE_RETURN_STRING(ECMD_VALIDATEHTMLDATA);
            HANDLE_CASE_RETURN_STRING(ECMD_VIEWXMLSCHEMAOVERVIEW);
            HANDLE_CASE_RETURN_STRING(ECMD_SHOWDEFAULTVIEW);
            HANDLE_CASE_RETURN_STRING(ECMD_EXPAND_CHILDREN);
            HANDLE_CASE_RETURN_STRING(ECMD_COLLAPSE_CHILDREN);
            HANDLE_CASE_RETURN_STRING(ECMD_TOPDOWNLAYOUT);
            HANDLE_CASE_RETURN_STRING(ECMD_LEFTRIGHTLAYOUT);
            HANDLE_CASE_RETURN_STRING(ECMD_INSERTCELLRIGHT);
            HANDLE_CASE_RETURN_STRING(ECMD_EDITMASTER);
            HANDLE_CASE_RETURN_STRING(ECMD_INSERTSNIPPET);
            HANDLE_CASE_RETURN_STRING(ECMD_FORMATANDVALIDATION);
            HANDLE_CASE_RETURN_STRING(ECMD_COLLAPSETAG);
            HANDLE_CASE_RETURN_STRING(ECMD_SELECT_TAG);
            HANDLE_CASE_RETURN_STRING(ECMD_SELECT_TAG_CONTENT);
            HANDLE_CASE_RETURN_STRING(ECMD_CHECK_ACCESSIBILITY);
            HANDLE_CASE_RETURN_STRING(ECMD_UNCOLLAPSETAG);
            HANDLE_CASE_RETURN_STRING(ECMD_GENERATEPAGERESOURCE);
            HANDLE_CASE_RETURN_STRING(ECMD_SHOWNONVISUALCONTROLS);
            HANDLE_CASE_RETURN_STRING(ECMD_RESIZECOLUMN);
            HANDLE_CASE_RETURN_STRING(ECMD_RESIZEROW);
            HANDLE_CASE_RETURN_STRING(ECMD_MAKEABSOLUTE);
            HANDLE_CASE_RETURN_STRING(ECMD_MAKERELATIVE);
            HANDLE_CASE_RETURN_STRING(ECMD_MAKESTATIC);
            HANDLE_CASE_RETURN_STRING(ECMD_INSERTLAYER);
            HANDLE_CASE_RETURN_STRING(ECMD_UPDATEDESIGNVIEW);
            HANDLE_CASE_RETURN_STRING(ECMD_UPDATESOURCEVIEW);
            HANDLE_CASE_RETURN_STRING(ECMD_INSERTCAPTION);
            HANDLE_CASE_RETURN_STRING(ECMD_DELETECAPTION);
            HANDLE_CASE_RETURN_STRING(ECMD_MAKEPOSITIONNOTSET);
            HANDLE_CASE_RETURN_STRING(ECMD_AUTOPOSITIONOPTIONS);
            HANDLE_CASE_RETURN_STRING(ECMD_EDITIMAGE);

            HANDLE_CASE_RETURN_STRING(ECMD_VALIDATION_TARGET);
            HANDLE_CASE_RETURN_STRING(ECMD_VALIDATION_TARGET_GET_LIST);
            HANDLE_CASE_RETURN_STRING(ECMD_CSS_TARGET);
            HANDLE_CASE_RETURN_STRING(ECMD_CSS_TARGET_GET_LIST);

            HANDLE_CASE_RETURN_STRING(ECMD_COMPILE);
            HANDLE_CASE_RETURN_STRING(ECMD_PROJSETTINGS);
            HANDLE_CASE_RETURN_STRING(ECMD_LINKONLY);
            HANDLE_CASE_RETURN_STRING(ECMD_REMOVE);
            HANDLE_CASE_RETURN_STRING(ECMD_PROJSTARTDEBUG);
            HANDLE_CASE_RETURN_STRING(ECMD_PROJSTEPINTO);
            HANDLE_CASE_RETURN_STRING(ECMD_UPDATEMGDRES);
            HANDLE_CASE_RETURN_STRING(ECMD_UPDATEWEBREF);
            HANDLE_CASE_RETURN_STRING(ECMD_ADDRESOURCE);
            HANDLE_CASE_RETURN_STRING(ECMD_WEBDEPLOY);
            HANDLE_CASE_RETURN_STRING(ECMD_PROJTOOLORDER);
            HANDLE_CASE_RETURN_STRING(ECMD_PROJECTTOOLFILES);
            HANDLE_CASE_RETURN_STRING(ECMD_OTB_PGO_INSTRUMENT);
            HANDLE_CASE_RETURN_STRING(ECMD_OTB_PGO_OPT);
            HANDLE_CASE_RETURN_STRING(ECMD_OTB_PGO_UPDATE);
            HANDLE_CASE_RETURN_STRING(ECMD_OTB_PGO_RUNSCENARIO);

            // Shareable commands originating in the VB and VBA projects
            HANDLE_CASE_RETURN_STRING(ECMD_ADDHTMLPAGE);
            HANDLE_CASE_RETURN_STRING(ECMD_ADDHTMLPAGECTX);
            HANDLE_CASE_RETURN_STRING(ECMD_ADDMODULE);
            HANDLE_CASE_RETURN_STRING(ECMD_ADDMODULECTX);
            HANDLE_CASE_RETURN_STRING(ECMD_ADDWFCFORM);
            HANDLE_CASE_RETURN_STRING(ECMD_ADDWEBFORM);
            HANDLE_CASE_RETURN_STRING(ECMD_ADDMASTERPAGE);
            HANDLE_CASE_RETURN_STRING(ECMD_ADDUSERCONTROL);
            HANDLE_CASE_RETURN_STRING(ECMD_ADDCONTENTPAGE);
            HANDLE_CASE_RETURN_STRING(ECMD_ADDIMAGEGENERATOR);
            HANDLE_CASE_RETURN_STRING(ECMD_ADDINHERWFCFORM);
            HANDLE_CASE_RETURN_STRING(ECMD_ADDINHERCONTROL);
            HANDLE_CASE_RETURN_STRING(ECMD_ADDWEBUSERCONTROL);
            HANDLE_CASE_RETURN_STRING(ECMD_ADDTBXCOMPONENT);
            HANDLE_CASE_RETURN_STRING(ECMD_ADDWEBSERVICE);
            HANDLE_CASE_RETURN_STRING(ECMD_ADDSTYLESHEET);
            HANDLE_CASE_RETURN_STRING(ECMD_SETBROWSELOCATION);
            HANDLE_CASE_RETURN_STRING(ECMD_REFRESHFOLDER);
            HANDLE_CASE_RETURN_STRING(ECMD_SETBROWSELOCATIONCTX);
            HANDLE_CASE_RETURN_STRING(ECMD_VIEWMARKUP);
            HANDLE_CASE_RETURN_STRING(ECMD_NEXTMETHOD);
            HANDLE_CASE_RETURN_STRING(ECMD_PREVMETHOD);

            // VB refactoring commands
            HANDLE_CASE_RETURN_STRING(ECMD_RENAMESYMBOL);
            HANDLE_CASE_RETURN_STRING(ECMD_SHOWREFERENCES);
            HANDLE_CASE_RETURN_STRING(ECMD_CREATESNIPPET);
            HANDLE_CASE_RETURN_STRING(ECMD_CREATEREPLACEMENT);
            HANDLE_CASE_RETURN_STRING(ECMD_INSERTCOMMENT);
            HANDLE_CASE_RETURN_STRING(ECMD_VIEWCOMPONENTDESIGNER);
            HANDLE_CASE_RETURN_STRING(ECMD_GOTOTYPEDEF);
            HANDLE_CASE_RETURN_STRING(ECMD_SHOWSNIPPETHIGHLIGHTING);
            HANDLE_CASE_RETURN_STRING(ECMD_HIDESNIPPETHIGHLIGHTING);

            // Shareable commands originating in the VFP project
            HANDLE_CASE_RETURN_STRING(ECMD_ADDVFPPAGE);
            HANDLE_CASE_RETURN_STRING(ECMD_SETBREAKPOINT);

            // Shareable commands originating in the HELP WORKSHOP project
            HANDLE_CASE_RETURN_STRING(ECMD_SHOWALLFILES);
            HANDLE_CASE_RETURN_STRING(ECMD_ADDTOPROJECT);
            HANDLE_CASE_RETURN_STRING(ECMD_ADDBLANKNODE);
            HANDLE_CASE_RETURN_STRING(ECMD_ADDNODEFROMFILE);
            HANDLE_CASE_RETURN_STRING(ECMD_CHANGEURLFROMFILE);
            HANDLE_CASE_RETURN_STRING(ECMD_EDITTOPIC);
            HANDLE_CASE_RETURN_STRING(ECMD_EDITTITLE);
            HANDLE_CASE_RETURN_STRING(ECMD_MOVENODEUP);
            HANDLE_CASE_RETURN_STRING(ECMD_MOVENODEDOWN);
            HANDLE_CASE_RETURN_STRING(ECMD_MOVENODELEFT);
            HANDLE_CASE_RETURN_STRING(ECMD_MOVENODERIGHT);

            // Shareable commands originating in the Deploy project
            HANDLE_CASE_RETURN_STRING(ECMD_ADDOUTPUT);
            HANDLE_CASE_RETURN_STRING(ECMD_ADDFILE);
            HANDLE_CASE_RETURN_STRING(ECMD_MERGEMODULE);
            HANDLE_CASE_RETURN_STRING(ECMD_ADDCOMPONENTS);
            HANDLE_CASE_RETURN_STRING(ECMD_LAUNCHINSTALLER);
            HANDLE_CASE_RETURN_STRING(ECMD_LAUNCHUNINSTALL);
            HANDLE_CASE_RETURN_STRING(ECMD_LAUNCHORCA);
            HANDLE_CASE_RETURN_STRING(ECMD_FILESYSTEMEDITOR);
            HANDLE_CASE_RETURN_STRING(ECMD_REGISTRYEDITOR);
            HANDLE_CASE_RETURN_STRING(ECMD_FILETYPESEDITOR);
            HANDLE_CASE_RETURN_STRING(ECMD_USERINTERFACEEDITOR);
            HANDLE_CASE_RETURN_STRING(ECMD_CUSTOMACTIONSEDITOR);
            HANDLE_CASE_RETURN_STRING(ECMD_LAUNCHCONDITIONSEDITOR);
            HANDLE_CASE_RETURN_STRING(ECMD_EDITOR);
            HANDLE_CASE_RETURN_STRING(ECMD_EXCLUDE);
            HANDLE_CASE_RETURN_STRING(ECMD_REFRESHDEPENDENCIES);
            HANDLE_CASE_RETURN_STRING(ECMD_VIEWOUTPUTS);
            HANDLE_CASE_RETURN_STRING(ECMD_VIEWDEPENDENCIES);
            HANDLE_CASE_RETURN_STRING(ECMD_VIEWFILTER);
            HANDLE_CASE_RETURN_STRING(ECMD_KEY);
            HANDLE_CASE_RETURN_STRING(ECMD_STRING);
            HANDLE_CASE_RETURN_STRING(ECMD_BINARY);
            HANDLE_CASE_RETURN_STRING(ECMD_DWORD);
            HANDLE_CASE_RETURN_STRING(ECMD_KEYSOLO);
            HANDLE_CASE_RETURN_STRING(ECMD_IMPORT);
            HANDLE_CASE_RETURN_STRING(ECMD_FOLDER);
            HANDLE_CASE_RETURN_STRING(ECMD_PROJECTOUTPUT);
            HANDLE_CASE_RETURN_STRING(ECMD_FILE);
            HANDLE_CASE_RETURN_STRING(ECMD_ADDMERGEMODULES);
            HANDLE_CASE_RETURN_STRING(ECMD_CREATESHORTCUT);
            HANDLE_CASE_RETURN_STRING(ECMD_LARGEICONS);
            HANDLE_CASE_RETURN_STRING(ECMD_SMALLICONS);
            HANDLE_CASE_RETURN_STRING(ECMD_LIST);
            HANDLE_CASE_RETURN_STRING(ECMD_DETAILS);
            HANDLE_CASE_RETURN_STRING(ECMD_ADDFILETYPE);
            HANDLE_CASE_RETURN_STRING(ECMD_ADDACTION);
            HANDLE_CASE_RETURN_STRING(ECMD_SETASDEFAULT);
            HANDLE_CASE_RETURN_STRING(ECMD_MOVEUP);
            HANDLE_CASE_RETURN_STRING(ECMD_MOVEDOWN);
            HANDLE_CASE_RETURN_STRING(ECMD_ADDDIALOG);
            HANDLE_CASE_RETURN_STRING(ECMD_IMPORTDIALOG);
            HANDLE_CASE_RETURN_STRING(ECMD_ADDFILESEARCH);
            HANDLE_CASE_RETURN_STRING(ECMD_ADDREGISTRYSEARCH);
            HANDLE_CASE_RETURN_STRING(ECMD_ADDCOMPONENTSEARCH);
            HANDLE_CASE_RETURN_STRING(ECMD_ADDLAUNCHCONDITION);
            HANDLE_CASE_RETURN_STRING(ECMD_ADDCUSTOMACTION);
            HANDLE_CASE_RETURN_STRING(ECMD_OUTPUTS);
            HANDLE_CASE_RETURN_STRING(ECMD_DEPENDENCIES);
            HANDLE_CASE_RETURN_STRING(ECMD_FILTER);
            HANDLE_CASE_RETURN_STRING(ECMD_COMPONENTS);
            HANDLE_CASE_RETURN_STRING(ECMD_ENVSTRING);
            HANDLE_CASE_RETURN_STRING(ECMD_CREATEEMPTYSHORTCUT);
            HANDLE_CASE_RETURN_STRING(ECMD_ADDFILECONDITION);
            HANDLE_CASE_RETURN_STRING(ECMD_ADDREGISTRYCONDITION);
            HANDLE_CASE_RETURN_STRING(ECMD_ADDCOMPONENTCONDITION);
            HANDLE_CASE_RETURN_STRING(ECMD_ADDURTCONDITION);
            HANDLE_CASE_RETURN_STRING(ECMD_ADDIISCONDITION);


            HANDLE_CASE_RETURN_STRING(ECMD_USERSAPPLICATIONDATAFOLDER); // ECMD_SPECIALFOLDERBASE
            HANDLE_CASE_RETURN_STRING(ECMD_COMMONFILES64FOLDER);
            HANDLE_CASE_RETURN_STRING(ECMD_COMMONFILESFOLDER);
            HANDLE_CASE_RETURN_STRING(ECMD_CUSTOMFOLDER);
            HANDLE_CASE_RETURN_STRING(ECMD_USERSDESKTOP);
            HANDLE_CASE_RETURN_STRING(ECMD_USERSFAVORITESFOLDER);
            HANDLE_CASE_RETURN_STRING(ECMD_FONTSFOLDER);
            HANDLE_CASE_RETURN_STRING(ECMD_GLOBALASSEMBLYCACHEFOLDER);
            HANDLE_CASE_RETURN_STRING(ECMD_MODULERETARGETABLEFOLDER);
            HANDLE_CASE_RETURN_STRING(ECMD_USERSPERSONALDATAFOLDER);
            HANDLE_CASE_RETURN_STRING(ECMD_PROGRAMFILES64FOLDER);
            HANDLE_CASE_RETURN_STRING(ECMD_PROGRAMFILESFOLDER);
            HANDLE_CASE_RETURN_STRING(ECMD_USERSPROGRAMSMENU);
            HANDLE_CASE_RETURN_STRING(ECMD_USERSSENDTOMENU);
            HANDLE_CASE_RETURN_STRING(ECMD_SHAREDCOMPONENTSFOLDER);
            HANDLE_CASE_RETURN_STRING(ECMD_USERSSTARTMENU);
            HANDLE_CASE_RETURN_STRING(ECMD_USERSSTARTUPFOLDER);
            HANDLE_CASE_RETURN_STRING(ECMD_SYSTEM64FOLDER);
            HANDLE_CASE_RETURN_STRING(ECMD_SYSTEMFOLDER);
            HANDLE_CASE_RETURN_STRING(ECMD_APPLICATIONFOLDER);
            HANDLE_CASE_RETURN_STRING(ECMD_USERSTEMPLATEFOLDER);
            HANDLE_CASE_RETURN_STRING(ECMD_WEBCUSTOMFOLDER);
            HANDLE_CASE_RETURN_STRING(ECMD_WINDOWSFOLDER);      //ECMD_SPECIALFOLDERLAST

            // Shareable commands originating in the Visual Studio Analyzer project
            HANDLE_CASE_RETURN_STRING(ECMD_EXPORTEVENTS);
            HANDLE_CASE_RETURN_STRING(ECMD_IMPORTEVENTS);
            HANDLE_CASE_RETURN_STRING(ECMD_VIEWEVENT);
            HANDLE_CASE_RETURN_STRING(ECMD_VIEWEVENTLIST);
            HANDLE_CASE_RETURN_STRING(ECMD_VIEWCHART);
            HANDLE_CASE_RETURN_STRING(ECMD_VIEWMACHINEDIAGRAM);
            HANDLE_CASE_RETURN_STRING(ECMD_VIEWPROCESSDIAGRAM);
            HANDLE_CASE_RETURN_STRING(ECMD_VIEWSOURCEDIAGRAM);
            HANDLE_CASE_RETURN_STRING(ECMD_VIEWSTRUCTUREDIAGRAM);
            HANDLE_CASE_RETURN_STRING(ECMD_VIEWTIMELINE);
            HANDLE_CASE_RETURN_STRING(ECMD_VIEWSUMMARY);
            HANDLE_CASE_RETURN_STRING(ECMD_APPLYFILTER);
            HANDLE_CASE_RETURN_STRING(ECMD_CLEARFILTER);
            HANDLE_CASE_RETURN_STRING(ECMD_STARTRECORDING);
            HANDLE_CASE_RETURN_STRING(ECMD_STOPRECORDING);
            HANDLE_CASE_RETURN_STRING(ECMD_PAUSERECORDING);
            HANDLE_CASE_RETURN_STRING(ECMD_ACTIVATEFILTER);
            HANDLE_CASE_RETURN_STRING(ECMD_SHOWFIRSTEVENT);
            HANDLE_CASE_RETURN_STRING(ECMD_SHOWPREVIOUSEVENT);
            HANDLE_CASE_RETURN_STRING(ECMD_SHOWNEXTEVENT);
            HANDLE_CASE_RETURN_STRING(ECMD_SHOWLASTEVENT);
            HANDLE_CASE_RETURN_STRING(ECMD_REPLAYEVENTS);
            HANDLE_CASE_RETURN_STRING(ECMD_STOPREPLAY);
            HANDLE_CASE_RETURN_STRING(ECMD_INCREASEPLAYBACKSPEED);
            HANDLE_CASE_RETURN_STRING(ECMD_DECREASEPLAYBACKSPEED);
            HANDLE_CASE_RETURN_STRING(ECMD_ADDMACHINE);
            HANDLE_CASE_RETURN_STRING(ECMD_ADDREMOVECOLUMNS);
            HANDLE_CASE_RETURN_STRING(ECMD_SORTCOLUMNS);
            HANDLE_CASE_RETURN_STRING(ECMD_SAVECOLUMNSETTINGS);
            HANDLE_CASE_RETURN_STRING(ECMD_RESETCOLUMNSETTINGS);
            HANDLE_CASE_RETURN_STRING(ECMD_SIZECOLUMNSTOFIT);
            HANDLE_CASE_RETURN_STRING(ECMD_AUTOSELECT);
            HANDLE_CASE_RETURN_STRING(ECMD_AUTOFILTER);
            HANDLE_CASE_RETURN_STRING(ECMD_AUTOPLAYTRACK);
            HANDLE_CASE_RETURN_STRING(ECMD_GOTOEVENT);
            HANDLE_CASE_RETURN_STRING(ECMD_ZOOMTOFIT);
            HANDLE_CASE_RETURN_STRING(ECMD_ADDGRAPH);
            HANDLE_CASE_RETURN_STRING(ECMD_REMOVEGRAPH);
            HANDLE_CASE_RETURN_STRING(ECMD_CONNECTMACHINE);
            HANDLE_CASE_RETURN_STRING(ECMD_DISCONNECTMACHINE);
            HANDLE_CASE_RETURN_STRING(ECMD_EXPANDSELECTION);
            HANDLE_CASE_RETURN_STRING(ECMD_COLLAPSESELECTION);
            HANDLE_CASE_RETURN_STRING(ECMD_ADDFILTER);
            HANDLE_CASE_RETURN_STRING(ECMD_ADDPREDEFINED0);
            HANDLE_CASE_RETURN_STRING(ECMD_ADDPREDEFINED1);
            HANDLE_CASE_RETURN_STRING(ECMD_ADDPREDEFINED2);
            HANDLE_CASE_RETURN_STRING(ECMD_ADDPREDEFINED3);
            HANDLE_CASE_RETURN_STRING(ECMD_ADDPREDEFINED4);
            HANDLE_CASE_RETURN_STRING(ECMD_ADDPREDEFINED5);
            HANDLE_CASE_RETURN_STRING(ECMD_ADDPREDEFINED6);
            HANDLE_CASE_RETURN_STRING(ECMD_ADDPREDEFINED7);
            HANDLE_CASE_RETURN_STRING(ECMD_ADDPREDEFINED8);
            HANDLE_CASE_RETURN_STRING(ECMD_TIMELINESIZETOFIT);

            // Shareable commands originating with Crystal Reports
            HANDLE_CASE_RETURN_STRING(ECMD_FIELDVIEW);
            HANDLE_CASE_RETURN_STRING(ECMD_SELECTEXPERT);
            HANDLE_CASE_RETURN_STRING(ECMD_TOPNEXPERT);
            HANDLE_CASE_RETURN_STRING(ECMD_SORTORDER);
            HANDLE_CASE_RETURN_STRING(ECMD_PROPPAGE);
            HANDLE_CASE_RETURN_STRING(ECMD_HELP);
            HANDLE_CASE_RETURN_STRING(ECMD_SAVEREPORT);
            HANDLE_CASE_RETURN_STRING(ECMD_INSERTSUMMARY);
            HANDLE_CASE_RETURN_STRING(ECMD_INSERTGROUP);
            HANDLE_CASE_RETURN_STRING(ECMD_INSERTSUBREPORT);
            HANDLE_CASE_RETURN_STRING(ECMD_INSERTCHART);
            HANDLE_CASE_RETURN_STRING(ECMD_INSERTPICTURE);

            // Shareable commands from the common project area (DirPrj)
            HANDLE_CASE_RETURN_STRING(ECMD_SETASSTARTPAGE);
            HANDLE_CASE_RETURN_STRING(ECMD_RECALCULATELINKS);
            HANDLE_CASE_RETURN_STRING(ECMD_WEBPERMISSIONS);
            HANDLE_CASE_RETURN_STRING(ECMD_COMPARETOMASTER);
            HANDLE_CASE_RETURN_STRING(ECMD_WORKOFFLINE);
            HANDLE_CASE_RETURN_STRING(ECMD_SYNCHRONIZEFOLDER);
            HANDLE_CASE_RETURN_STRING(ECMD_SYNCHRONIZEALLFOLDERS);
            HANDLE_CASE_RETURN_STRING(ECMD_COPYPROJECT);
            HANDLE_CASE_RETURN_STRING(ECMD_IMPORTFILEFROMWEB);
            HANDLE_CASE_RETURN_STRING(ECMD_INCLUDEINPROJECT);
            HANDLE_CASE_RETURN_STRING(ECMD_EXCLUDEFROMPROJECT);
            HANDLE_CASE_RETURN_STRING(ECMD_BROKENLINKSREPORT);
            HANDLE_CASE_RETURN_STRING(ECMD_ADDPROJECTOUTPUTS);
            HANDLE_CASE_RETURN_STRING(ECMD_ADDREFERENCE);
            HANDLE_CASE_RETURN_STRING(ECMD_ADDWEBREFERENCE);
            HANDLE_CASE_RETURN_STRING(ECMD_ADDWEBREFERENCECTX);
            HANDLE_CASE_RETURN_STRING(ECMD_UPDATEWEBREFERENCE);
            HANDLE_CASE_RETURN_STRING(ECMD_RUNCUSTOMTOOL);
            HANDLE_CASE_RETURN_STRING(ECMD_SETRUNTIMEVERSION);
            HANDLE_CASE_RETURN_STRING(ECMD_VIEWREFINOBJECTBROWSER);
            HANDLE_CASE_RETURN_STRING(ECMD_PUBLISH);
            HANDLE_CASE_RETURN_STRING(ECMD_PUBLISHCTX);
            HANDLE_CASE_RETURN_STRING(ECMD_STARTOPTIONS);
            HANDLE_CASE_RETURN_STRING(ECMD_ADDREFERENCECTX);
            HANDLE_CASE_RETURN_STRING(ECMD_STARTOPTIONSCTX);
            HANDLE_CASE_RETURN_STRING(ECMD_DETACHLOCALDATAFILECTX);
            HANDLE_CASE_RETURN_STRING(ECMD_ADDSERVICEREFERENCE);
            HANDLE_CASE_RETURN_STRING(ECMD_ADDSERVICEREFERENCECTX);
            HANDLE_CASE_RETURN_STRING(ECMD_UPDATESERVICEREFERENCE);
            HANDLE_CASE_RETURN_STRING(ECMD_CONFIGURESERVICEREFERENCE);

            // Shareable commands for right drag operations
            HANDLE_CASE_RETURN_STRING(ECMD_DRAG_MOVE);
            HANDLE_CASE_RETURN_STRING(ECMD_DRAG_COPY);
            HANDLE_CASE_RETURN_STRING(ECMD_DRAG_CANCEL);

            // Shareable commands from the VC resource editor
            HANDLE_CASE_RETURN_STRING(ECMD_TESTDIALOG);
            HANDLE_CASE_RETURN_STRING(ECMD_SPACEACROSS);
            HANDLE_CASE_RETURN_STRING(ECMD_SPACEDOWN);
            HANDLE_CASE_RETURN_STRING(ECMD_TOGGLEGRID);
            HANDLE_CASE_RETURN_STRING(ECMD_TOGGLEGUIDES);
            HANDLE_CASE_RETURN_STRING(ECMD_SIZETOTEXT);
            HANDLE_CASE_RETURN_STRING(ECMD_CENTERVERT);
            HANDLE_CASE_RETURN_STRING(ECMD_CENTERHORZ);
            HANDLE_CASE_RETURN_STRING(ECMD_FLIPDIALOG);
            HANDLE_CASE_RETURN_STRING(ECMD_SETTABORDER);
            HANDLE_CASE_RETURN_STRING(ECMD_BUTTONRIGHT);
            HANDLE_CASE_RETURN_STRING(ECMD_BUTTONBOTTOM);
            HANDLE_CASE_RETURN_STRING(ECMD_AUTOLAYOUTGROW);
            HANDLE_CASE_RETURN_STRING(ECMD_AUTOLAYOUTNORESIZE);
            HANDLE_CASE_RETURN_STRING(ECMD_AUTOLAYOUTOPTIMIZE);
            HANDLE_CASE_RETURN_STRING(ECMD_GUIDESETTINGS);
            HANDLE_CASE_RETURN_STRING(ECMD_RESOURCEINCLUDES);
            HANDLE_CASE_RETURN_STRING(ECMD_RESOURCESYMBOLS);
            HANDLE_CASE_RETURN_STRING(ECMD_OPENBINARY);
            HANDLE_CASE_RETURN_STRING(ECMD_RESOURCEOPEN);
            HANDLE_CASE_RETURN_STRING(ECMD_RESOURCENEW);
            HANDLE_CASE_RETURN_STRING(ECMD_RESOURCENEWCOPY);
            HANDLE_CASE_RETURN_STRING(ECMD_INSERT);
            HANDLE_CASE_RETURN_STRING(ECMD_EXPORT);
            HANDLE_CASE_RETURN_STRING(ECMD_CTLMOVELEFT);
            HANDLE_CASE_RETURN_STRING(ECMD_CTLMOVEDOWN);
            HANDLE_CASE_RETURN_STRING(ECMD_CTLMOVERIGHT);
            HANDLE_CASE_RETURN_STRING(ECMD_CTLMOVEUP);
            HANDLE_CASE_RETURN_STRING(ECMD_CTLSIZEDOWN);
            HANDLE_CASE_RETURN_STRING(ECMD_CTLSIZEUP);
            HANDLE_CASE_RETURN_STRING(ECMD_CTLSIZELEFT);
            HANDLE_CASE_RETURN_STRING(ECMD_CTLSIZERIGHT);
            HANDLE_CASE_RETURN_STRING(ECMD_NEWACCELERATOR);
            HANDLE_CASE_RETURN_STRING(ECMD_CAPTUREKEYSTROKE);
            HANDLE_CASE_RETURN_STRING(ECMD_INSERTACTIVEXCTL);
            HANDLE_CASE_RETURN_STRING(ECMD_INVERTCOLORS);
            HANDLE_CASE_RETURN_STRING(ECMD_FLIPHORIZONTAL);
            HANDLE_CASE_RETURN_STRING(ECMD_FLIPVERTICAL);
            HANDLE_CASE_RETURN_STRING(ECMD_ROTATE90);
            HANDLE_CASE_RETURN_STRING(ECMD_SHOWCOLORSWINDOW);
            HANDLE_CASE_RETURN_STRING(ECMD_NEWSTRING);
            HANDLE_CASE_RETURN_STRING(ECMD_NEWINFOBLOCK);
            HANDLE_CASE_RETURN_STRING(ECMD_DELETEINFOBLOCK);
            HANDLE_CASE_RETURN_STRING(ECMD_ADJUSTCOLORS);
            HANDLE_CASE_RETURN_STRING(ECMD_LOADPALETTE);
            HANDLE_CASE_RETURN_STRING(ECMD_SAVEPALETTE);
            HANDLE_CASE_RETURN_STRING(ECMD_CHECKMNEMONICS);
            HANDLE_CASE_RETURN_STRING(ECMD_DRAWOPAQUE);
            HANDLE_CASE_RETURN_STRING(ECMD_TOOLBAREDITOR);
            HANDLE_CASE_RETURN_STRING(ECMD_GRIDSETTINGS);
            HANDLE_CASE_RETURN_STRING(ECMD_NEWDEVICEIMAGE);
            HANDLE_CASE_RETURN_STRING(ECMD_OPENDEVICEIMAGE);
            HANDLE_CASE_RETURN_STRING(ECMD_DELETEDEVICEIMAGE);
            HANDLE_CASE_RETURN_STRING(ECMD_VIEWASPOPUP);
            HANDLE_CASE_RETURN_STRING(ECMD_CHECKMENUMNEMONICS);
            HANDLE_CASE_RETURN_STRING(ECMD_SHOWIMAGEGRID);
            HANDLE_CASE_RETURN_STRING(ECMD_SHOWTILEGRID);
            HANDLE_CASE_RETURN_STRING(ECMD_MAGNIFY);
            HANDLE_CASE_RETURN_STRING(cmdidResProps);
            HANDLE_CASE_RETURN_STRING(ECMD_IMPORTICONIMAGE);
            HANDLE_CASE_RETURN_STRING(ECMD_EXPORTICONIMAGE);
            HANDLE_CASE_RETURN_STRING(ECMD_OPENEXTERNALEDITOR);

            // Shareable commands from the VC resource editor (Image editor toolbar)
            HANDLE_CASE_RETURN_STRING(ECMD_PICKRECTANGLE);
            HANDLE_CASE_RETURN_STRING(ECMD_PICKREGION);
            HANDLE_CASE_RETURN_STRING(ECMD_PICKCOLOR);
            HANDLE_CASE_RETURN_STRING(ECMD_ERASERTOOL);
            HANDLE_CASE_RETURN_STRING(ECMD_FILLTOOL);
            HANDLE_CASE_RETURN_STRING(ECMD_PENCILTOOL);
            HANDLE_CASE_RETURN_STRING(ECMD_BRUSHTOOL);
            HANDLE_CASE_RETURN_STRING(ECMD_AIRBRUSHTOOL);
            HANDLE_CASE_RETURN_STRING(ECMD_LINETOOL);
            HANDLE_CASE_RETURN_STRING(ECMD_CURVETOOL);
            HANDLE_CASE_RETURN_STRING(ECMD_TEXTTOOL);
            HANDLE_CASE_RETURN_STRING(ECMD_RECTTOOL);
            HANDLE_CASE_RETURN_STRING(ECMD_OUTLINERECTTOOL);
            HANDLE_CASE_RETURN_STRING(ECMD_FILLEDRECTTOOL);
            HANDLE_CASE_RETURN_STRING(ECMD_ROUNDRECTTOOL);
            HANDLE_CASE_RETURN_STRING(ECMD_OUTLINEROUNDRECTTOOL);
            HANDLE_CASE_RETURN_STRING(ECMD_FILLEDROUNDRECTTOOL);
            HANDLE_CASE_RETURN_STRING(ECMD_ELLIPSETOOL);
            HANDLE_CASE_RETURN_STRING(ECMD_OUTLINEELLIPSETOOL);
            HANDLE_CASE_RETURN_STRING(ECMD_FILLEDELLIPSETOOL);
            HANDLE_CASE_RETURN_STRING(ECMD_SETHOTSPOT);
            HANDLE_CASE_RETURN_STRING(ECMD_ZOOMTOOL);
            HANDLE_CASE_RETURN_STRING(ECMD_ZOOM1X);
            HANDLE_CASE_RETURN_STRING(ECMD_ZOOM2X);
            HANDLE_CASE_RETURN_STRING(ECMD_ZOOM6X);
            HANDLE_CASE_RETURN_STRING(ECMD_ZOOM8X);
            HANDLE_CASE_RETURN_STRING(ECMD_TRANSPARENTBCKGRND);
            HANDLE_CASE_RETURN_STRING(ECMD_OPAQUEBCKGRND);

            HANDLE_CASE_RETURN_STRING(ECMD_ERASERSMALL);
            HANDLE_CASE_RETURN_STRING(ECMD_ERASERMEDIUM);
            HANDLE_CASE_RETURN_STRING(ECMD_ERASERLARGE);
            HANDLE_CASE_RETURN_STRING(ECMD_ERASERLARGER);
            HANDLE_CASE_RETURN_STRING(ECMD_CIRCLELARGE);
            HANDLE_CASE_RETURN_STRING(ECMD_CIRCLEMEDIUM);
            HANDLE_CASE_RETURN_STRING(ECMD_CIRCLESMALL);
            HANDLE_CASE_RETURN_STRING(ECMD_SQUARELARGE);
            HANDLE_CASE_RETURN_STRING(ECMD_SQUAREMEDIUM);
            HANDLE_CASE_RETURN_STRING(ECMD_SQUARESMALL);
            HANDLE_CASE_RETURN_STRING(ECMD_LEFTDIAGLARGE);
            HANDLE_CASE_RETURN_STRING(ECMD_LEFTDIAGMEDIUM);
            HANDLE_CASE_RETURN_STRING(ECMD_LEFTDIAGSMALL);
            HANDLE_CASE_RETURN_STRING(ECMD_RIGHTDIAGLARGE);
            HANDLE_CASE_RETURN_STRING(ECMD_RIGHTDIAGMEDIUM);
            HANDLE_CASE_RETURN_STRING(ECMD_RIGHTDIAGSMALL);
            HANDLE_CASE_RETURN_STRING(ECMD_SPLASHSMALL);
            HANDLE_CASE_RETURN_STRING(ECMD_SPLASHMEDIUM);
            HANDLE_CASE_RETURN_STRING(ECMD_SPLASHLARGE);
            HANDLE_CASE_RETURN_STRING(ECMD_LINESMALLER);
            HANDLE_CASE_RETURN_STRING(ECMD_LINESMALL);
            HANDLE_CASE_RETURN_STRING(ECMD_LINEMEDIUM);
            HANDLE_CASE_RETURN_STRING(ECMD_LINELARGE);
            HANDLE_CASE_RETURN_STRING(ECMD_LINELARGER);
            HANDLE_CASE_RETURN_STRING(ECMD_LARGERBRUSH);
            HANDLE_CASE_RETURN_STRING(ECMD_LARGEBRUSH);
            HANDLE_CASE_RETURN_STRING(ECMD_STDBRUSH);
            HANDLE_CASE_RETURN_STRING(ECMD_SMALLBRUSH);
            HANDLE_CASE_RETURN_STRING(ECMD_SMALLERBRUSH);
            HANDLE_CASE_RETURN_STRING(ECMD_ZOOMIN);
            HANDLE_CASE_RETURN_STRING(ECMD_ZOOMOUT);
            HANDLE_CASE_RETURN_STRING(ECMD_PREVCOLOR);
            HANDLE_CASE_RETURN_STRING(ECMD_PREVECOLOR);
            HANDLE_CASE_RETURN_STRING(ECMD_NEXTCOLOR);
            HANDLE_CASE_RETURN_STRING(ECMD_NEXTECOLOR);
            HANDLE_CASE_RETURN_STRING(ECMD_IMG_OPTIONS);

            // Sharable Commands from Visual Web Developer (website projects)
            HANDLE_CASE_RETURN_STRING(ECMD_STARTWEBADMINTOOL);
            HANDLE_CASE_RETURN_STRING(ECMD_NESTRELATEDFILES);

            // Shareable commands from WINFORMS
            HANDLE_CASE_RETURN_STRING(ECMD_CANCELDRAG);
            HANDLE_CASE_RETURN_STRING(ECMD_DEFAULTACTION);
            HANDLE_CASE_RETURN_STRING(ECMD_CTLMOVEUPGRID);
            HANDLE_CASE_RETURN_STRING(ECMD_CTLMOVEDOWNGRID);
            HANDLE_CASE_RETURN_STRING(ECMD_CTLMOVELEFTGRID);
            HANDLE_CASE_RETURN_STRING(ECMD_CTLMOVERIGHTGRID);
            HANDLE_CASE_RETURN_STRING(ECMD_CTLSIZERIGHTGRID);
            HANDLE_CASE_RETURN_STRING(ECMD_CTLSIZEUPGRID);
            HANDLE_CASE_RETURN_STRING(ECMD_CTLSIZELEFTGRID);
            HANDLE_CASE_RETURN_STRING(ECMD_CTLSIZEDOWNGRID);
            HANDLE_CASE_RETURN_STRING(ECMD_NEXTCTL);
            HANDLE_CASE_RETURN_STRING(ECMD_PREVCTL);
            HANDLE_CASE_RETURN_STRING(ECMD_RENAME);
            HANDLE_CASE_RETURN_STRING(ECMD_EXTRACTMETHOD);
            HANDLE_CASE_RETURN_STRING(ECMD_ENCAPSULATEFIELD);
            HANDLE_CASE_RETURN_STRING(ECMD_EXTRACTINTERFACE);
            HANDLE_CASE_RETURN_STRING(ECMD_PROMOTELOCAL);
            HANDLE_CASE_RETURN_STRING(ECMD_REMOVEPARAMETERS);
            HANDLE_CASE_RETURN_STRING(ECMD_REORDERPARAMETERS);
            HANDLE_CASE_RETURN_STRING(ECMD_GENERATEMETHODSTUB);
            HANDLE_CASE_RETURN_STRING(ECMD_IMPLEMENTINTERFACEIMPLICIT);
            HANDLE_CASE_RETURN_STRING(ECMD_IMPLEMENTINTERFACEEXPLICIT);
            HANDLE_CASE_RETURN_STRING(ECMD_IMPLEMENTABSTRACTCLASS);
            HANDLE_CASE_RETURN_STRING(ECMD_SURROUNDWITH);

            // Additional shell commands added to CMDSETID_StandardCommandSet2K
            // because CLSID_StandardCommandSet97 is now considered closed.
            HANDLE_CASE_RETURN_STRING(cmdidToggleWordWrapOW);
            HANDLE_CASE_RETURN_STRING(cmdidGotoNextLocationOW);
            HANDLE_CASE_RETURN_STRING(cmdidGotoPrevLocationOW);
            HANDLE_CASE_RETURN_STRING(cmdidBuildOnlyProject);
            HANDLE_CASE_RETURN_STRING(cmdidRebuildOnlyProject);
            HANDLE_CASE_RETURN_STRING(cmdidCleanOnlyProject);
            HANDLE_CASE_RETURN_STRING(cmdidSetBuildStartupsOnlyOnRun);
            HANDLE_CASE_RETURN_STRING(cmdidUnhideAll);
            HANDLE_CASE_RETURN_STRING(cmdidHideFolder);
            HANDLE_CASE_RETURN_STRING(cmdidUnhideFolders);
            HANDLE_CASE_RETURN_STRING(cmdidCopyFullPathName);
            HANDLE_CASE_RETURN_STRING(cmdidSaveFolderAsSolution);
            HANDLE_CASE_RETURN_STRING(cmdidManageUserSettings);
            HANDLE_CASE_RETURN_STRING(cmdidNewSolutionFolder);
            HANDLE_CASE_RETURN_STRING(cmdidSetTrackSelInSlnExp);//changed to match VS 2005 cmdid
            HANDLE_CASE_RETURN_STRING(cmdidClearPaneOW);
            HANDLE_CASE_RETURN_STRING(cmdidGotoErrorTagOW);
            HANDLE_CASE_RETURN_STRING(cmdidGotoNextErrorTagOW);
            HANDLE_CASE_RETURN_STRING(cmdidGotoPrevErrorTagOW);
            HANDLE_CASE_RETURN_STRING(cmdidClearPaneFR1);
            HANDLE_CASE_RETURN_STRING(cmdidGotoErrorTagFR1);
            HANDLE_CASE_RETURN_STRING(cmdidGotoNextErrorTagFR1);
            HANDLE_CASE_RETURN_STRING(cmdidGotoPrevErrorTagFR1);
            HANDLE_CASE_RETURN_STRING(cmdidClearPaneFR2);
            HANDLE_CASE_RETURN_STRING(cmdidGotoErrorTagFR2);
            HANDLE_CASE_RETURN_STRING(cmdidGotoNextErrorTagFR2);
            HANDLE_CASE_RETURN_STRING(cmdidGotoPrevErrorTagFR2);

            // Output Window pane selection dropdown
            HANDLE_CASE_RETURN_STRING(cmdidOutputPaneCombo);
            HANDLE_CASE_RETURN_STRING(cmdidOutputPaneComboList);
            HANDLE_CASE_RETURN_STRING(cmdidDisableDockingChanges);
            HANDLE_CASE_RETURN_STRING(cmdidToggleFloat);
            HANDLE_CASE_RETURN_STRING(cmdidResetLayout);
            HANDLE_CASE_RETURN_STRING(cmdidEditProjectFile);
            HANDLE_CASE_RETURN_STRING(cmdidOpenInFormView);
            HANDLE_CASE_RETURN_STRING(cmdidOpenInCodeView);
            HANDLE_CASE_RETURN_STRING(cmdidExploreFolderInWindows);
            HANDLE_CASE_RETURN_STRING(cmdidNewSolutionFolderBar);
            HANDLE_CASE_RETURN_STRING(cmdidDataShortcut);

            // Tool window navigation
            HANDLE_CASE_RETURN_STRING(cmdidNextToolWindow);
            HANDLE_CASE_RETURN_STRING(cmdidPrevToolWindow);
            HANDLE_CASE_RETURN_STRING(cmdidBrowseToFileInExplorer);
            HANDLE_CASE_RETURN_STRING(cmdidShowEzMDIFileMenu);
            HANDLE_CASE_RETURN_STRING(cmdidNextToolWindowNav);// command for NextToolWindow with navigator
            HANDLE_CASE_RETURN_STRING(cmdidPrevToolWindowNav);

            // One Time build with static anlaysis for ProjOnly
            HANDLE_CASE_RETURN_STRING(cmdidStaticAnalysisOnlyProject);

            //Run Code Analysis on Build Menu
            HANDLE_CASE_RETURN_STRING(ECMD_RUNFXCOPSEL);

            //Run Code Analysis on Context menu for the selected project
            HANDLE_CASE_RETURN_STRING(ECMD_RUNFXCOPPROJCTX);

            HANDLE_CASE_RETURN_STRING(cmdidCloseAllButThis);

            // the numbers from 1650 to 1699 are reserved for Class view  specific commands
            //  CV_COMMANDS_BASE + XXX
            HANDLE_CASE_RETURN_STRING(cmdidCVShowInheritedMembers);
            HANDLE_CASE_RETURN_STRING(cmdidCVShowBaseTypes);
            HANDLE_CASE_RETURN_STRING(cmdidCVShowDerivedTypes);
            HANDLE_CASE_RETURN_STRING(cmdidCVShowHidden);
            HANDLE_CASE_RETURN_STRING(cmdidCVBack);
            HANDLE_CASE_RETURN_STRING(cmdidCVForward);
            HANDLE_CASE_RETURN_STRING(cmdidCVSearchCombo);
            HANDLE_CASE_RETURN_STRING(cmdidCVSearch);
            HANDLE_CASE_RETURN_STRING(cmdidCVSortObjectsAlpha);
            HANDLE_CASE_RETURN_STRING(cmdidCVSortObjectsType);
            HANDLE_CASE_RETURN_STRING(cmdidCVSortObjectsAccess);
            HANDLE_CASE_RETURN_STRING(cmdidCVGroupObjectsType);
            HANDLE_CASE_RETURN_STRING(cmdidCVSortMembersAlpha);
            HANDLE_CASE_RETURN_STRING(cmdidCVSortMembersType);
            HANDLE_CASE_RETURN_STRING(cmdidCVSortMembersAccess);
            HANDLE_CASE_RETURN_STRING(cmdidCVTypeBrowserSettings);
            HANDLE_CASE_RETURN_STRING(cmdidCVViewMembersAsImplementor);
            HANDLE_CASE_RETURN_STRING(cmdidCVViewMembersAsSubclass);
            HANDLE_CASE_RETURN_STRING(cmdidCVViewMembersAsUser);
            HANDLE_CASE_RETURN_STRING(cmdidCVReserved1);
            HANDLE_CASE_RETURN_STRING(cmdidCVReserved2);
            HANDLE_CASE_RETURN_STRING(cmdidCVShowProjectReferences);
            HANDLE_CASE_RETURN_STRING(cmdidCVGroupMembersType);
            HANDLE_CASE_RETURN_STRING(cmdidCVClearSearch);
            HANDLE_CASE_RETURN_STRING(cmdidCVFilterToType);
            HANDLE_CASE_RETURN_STRING(cmdidCVSortByBestMatch);
            HANDLE_CASE_RETURN_STRING(cmdidCVSearchMRUList);
            HANDLE_CASE_RETURN_STRING(cmdidCVViewOtherMembers);
            HANDLE_CASE_RETURN_STRING(cmdidCVSearchCmd);
            HANDLE_CASE_RETURN_STRING(cmdidCVGoToSearchCmd);

            //end of CV commands
            HANDLE_CASE_RETURN_STRING(cmdidControlGallery);

            //the numbers from 1710 to 1759 are reserved for Object Browser specific commands
            HANDLE_CASE_RETURN_STRING(cmdidOBShowInheritedMembers);
            HANDLE_CASE_RETURN_STRING(cmdidOBShowBaseTypes);
            HANDLE_CASE_RETURN_STRING(cmdidOBShowDerivedTypes);
            HANDLE_CASE_RETURN_STRING(cmdidOBShowHidden);
            HANDLE_CASE_RETURN_STRING(cmdidOBBack);
            HANDLE_CASE_RETURN_STRING(cmdidOBForward);
            HANDLE_CASE_RETURN_STRING(cmdidOBSearchCombo);
            HANDLE_CASE_RETURN_STRING(cmdidOBSearch);
            HANDLE_CASE_RETURN_STRING(cmdidOBSortObjectsAlpha);
            HANDLE_CASE_RETURN_STRING(cmdidOBSortObjectsType);
            HANDLE_CASE_RETURN_STRING(cmdidOBSortObjectsAccess);
            HANDLE_CASE_RETURN_STRING(cmdidOBGroupObjectsType);
            HANDLE_CASE_RETURN_STRING(cmdidOBSortMembersAlpha);
            HANDLE_CASE_RETURN_STRING(cmdidOBSortMembersType);
            HANDLE_CASE_RETURN_STRING(cmdidOBSortMembersAccess);
            HANDLE_CASE_RETURN_STRING(cmdidOBTypeBrowserSettings);
            HANDLE_CASE_RETURN_STRING(cmdidOBViewMembersAsImplementor);
            HANDLE_CASE_RETURN_STRING(cmdidOBViewMembersAsSubclass);
            HANDLE_CASE_RETURN_STRING(cmdidOBViewMembersAsUser);
            HANDLE_CASE_RETURN_STRING(cmdidOBNamespacesView);
            HANDLE_CASE_RETURN_STRING(cmdidOBContainersView);
            HANDLE_CASE_RETURN_STRING(cmdidOBReserved1);
            HANDLE_CASE_RETURN_STRING(cmdidOBGroupMembersType);
            HANDLE_CASE_RETURN_STRING(cmdidOBClearSearch);
            HANDLE_CASE_RETURN_STRING(cmdidOBFilterToType);
            HANDLE_CASE_RETURN_STRING(cmdidOBSortByBestMatch);
            HANDLE_CASE_RETURN_STRING(cmdidOBSearchMRUList);
            HANDLE_CASE_RETURN_STRING(cmdidOBViewOtherMembers);
            HANDLE_CASE_RETURN_STRING(cmdidOBSearchCmd);
            HANDLE_CASE_RETURN_STRING(cmdidOBGoToSearchCmd);
            HANDLE_CASE_RETURN_STRING(cmdidOBShowExtensionMembers);

            HANDLE_CASE_RETURN_STRING(cmdidFullScreen2);

            // find symbol results sorting command
            HANDLE_CASE_RETURN_STRING(cmdidFSRSortObjectsAlpha);
            HANDLE_CASE_RETURN_STRING(cmdidFSRSortByBestMatch);
            HANDLE_CASE_RETURN_STRING(cmdidNavigateBack);
            HANDLE_CASE_RETURN_STRING(cmdidNavigateForward);

            // Error correction commands (need to be consecutive)
            HANDLE_CASE_RETURN_STRING(ECMD_CORRECTION_1);
            HANDLE_CASE_RETURN_STRING(ECMD_CORRECTION_2);
            HANDLE_CASE_RETURN_STRING(ECMD_CORRECTION_3);
            HANDLE_CASE_RETURN_STRING(ECMD_CORRECTION_4);
            HANDLE_CASE_RETURN_STRING(ECMD_CORRECTION_5);
            HANDLE_CASE_RETURN_STRING(ECMD_CORRECTION_6);
            HANDLE_CASE_RETURN_STRING(ECMD_CORRECTION_7);
            HANDLE_CASE_RETURN_STRING(ECMD_CORRECTION_8);
            HANDLE_CASE_RETURN_STRING(ECMD_CORRECTION_9);
            HANDLE_CASE_RETURN_STRING(ECMD_CORRECTION_10);

            // Object Browser commands
            HANDLE_CASE_RETURN_STRING(cmdidOBAddReference);

            // Edit.FindAllReferences
            HANDLE_CASE_RETURN_STRING(cmdidFindReferences);

            // Code Definition View
            HANDLE_CASE_RETURN_STRING(cmdidCodeDefView);
            HANDLE_CASE_RETURN_STRING(cmdidCodeDefViewGoToPrev);
            HANDLE_CASE_RETURN_STRING(cmdidCodeDefViewGoToNext);
            HANDLE_CASE_RETURN_STRING(cmdidCodeDefViewEditDefinition);
            HANDLE_CASE_RETURN_STRING(cmdidCodeDefViewChooseEncoding);

            // Class view
            HANDLE_CASE_RETURN_STRING(cmdidViewInClassDiagram);

            // Shareable commands from VSDesigner
            HANDLE_CASE_RETURN_STRING(ECMD_ADDDBTABLE);
            HANDLE_CASE_RETURN_STRING(ECMD_ADDDATATABLE);
            HANDLE_CASE_RETURN_STRING(ECMD_ADDFUNCTION);
            HANDLE_CASE_RETURN_STRING(ECMD_ADDRELATION);
            HANDLE_CASE_RETURN_STRING(ECMD_ADDKEY);
            HANDLE_CASE_RETURN_STRING(ECMD_ADDCOLUMN);
            HANDLE_CASE_RETURN_STRING(ECMD_CONVERT_DBTABLE);
            HANDLE_CASE_RETURN_STRING(ECMD_CONVERT_DATATABLE);
            HANDLE_CASE_RETURN_STRING(ECMD_GENERATE_DATABASE);
            HANDLE_CASE_RETURN_STRING(ECMD_CONFIGURE_CONNECTIONS);
            HANDLE_CASE_RETURN_STRING(ECMD_IMPORT_XMLSCHEMA);
            HANDLE_CASE_RETURN_STRING(ECMD_SYNC_WITH_DATABASE);
            HANDLE_CASE_RETURN_STRING(ECMD_CONFIGURE);
            HANDLE_CASE_RETURN_STRING(ECMD_CREATE_DATAFORM);
            HANDLE_CASE_RETURN_STRING(ECMD_CREATE_ENUM);
            HANDLE_CASE_RETURN_STRING(ECMD_INSERT_FUNCTION);
            HANDLE_CASE_RETURN_STRING(ECMD_EDIT_FUNCTION);
            HANDLE_CASE_RETURN_STRING(ECMD_SET_PRIMARY_KEY);
            HANDLE_CASE_RETURN_STRING(ECMD_INSERT_COLUMN);
            HANDLE_CASE_RETURN_STRING(ECMD_AUTO_SIZE);
            HANDLE_CASE_RETURN_STRING(ECMD_SHOW_RELATION_LABELS);


            HANDLE_CASE_RETURN_STRING(cmdid_VSD_GenerateDataSet);
            HANDLE_CASE_RETURN_STRING(cmdid_VSD_Preview);
            HANDLE_CASE_RETURN_STRING(cmdid_VSD_ConfigureAdapter);
            HANDLE_CASE_RETURN_STRING(cmdid_VSD_ViewDatasetSchema);
            HANDLE_CASE_RETURN_STRING(cmdid_VSD_DatasetProperties);
            HANDLE_CASE_RETURN_STRING(cmdid_VSD_ParameterizeForm);
            HANDLE_CASE_RETURN_STRING(cmdid_VSD_AddChildForm);

            HANDLE_CASE_RETURN_STRING(ECMD_EDITCONSTRAINT);
            HANDLE_CASE_RETURN_STRING(ECMD_DELETECONSTRAINT);
            HANDLE_CASE_RETURN_STRING(ECMD_EDITDATARELATION);

            HANDLE_CASE_RETURN_STRING(cmdidCloseProject);
            HANDLE_CASE_RETURN_STRING(cmdidReloadCommandBars);
            HANDLE_CASE_RETURN_STRING(cmdidSolutionPlatform);
            HANDLE_CASE_RETURN_STRING(cmdidSolutionPlatformGetList);

            // Initially used by DataSet Editor
            HANDLE_CASE_RETURN_STRING(ECMD_DATAACCESSOR);
            HANDLE_CASE_RETURN_STRING(ECMD_ADD_DATAACCESSOR);
            HANDLE_CASE_RETURN_STRING(ECMD_QUERY);
            HANDLE_CASE_RETURN_STRING(ECMD_ADD_QUERY);

            // Publish solution
            HANDLE_CASE_RETURN_STRING(ECMD_PUBLISHSELECTION);
            HANDLE_CASE_RETURN_STRING(ECMD_PUBLISHSLNCTX);

            // Call Browser
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowserShowCallsTo);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowserShowCallsFrom);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowserShowNewCallsTo);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowserShowNewCallsFrom);

            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser1ShowCallsTo);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser2ShowCallsTo);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser3ShowCallsTo);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser4ShowCallsTo);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser5ShowCallsTo);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser6ShowCallsTo);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser7ShowCallsTo);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser8ShowCallsTo);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser9ShowCallsTo);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser10ShowCallsTo);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser11ShowCallsTo);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser12ShowCallsTo);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser13ShowCallsTo);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser14ShowCallsTo);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser15ShowCallsTo);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser16ShowCallsTo);

            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser1ShowCallsFrom);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser2ShowCallsFrom);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser3ShowCallsFrom);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser4ShowCallsFrom);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser5ShowCallsFrom);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser6ShowCallsFrom);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser7ShowCallsFrom);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser8ShowCallsFrom);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser9ShowCallsFrom);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser10ShowCallsFrom);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser11ShowCallsFrom);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser12ShowCallsFrom);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser13ShowCallsFrom);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser14ShowCallsFrom);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser15ShowCallsFrom);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser16ShowCallsFrom);

            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser1ShowFullNames);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser2ShowFullNames);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser3ShowFullNames);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser4ShowFullNames);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser5ShowFullNames);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser6ShowFullNames);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser7ShowFullNames);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser8ShowFullNames);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser9ShowFullNames);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser10ShowFullNames);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser11ShowFullNames);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser12ShowFullNames);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser13ShowFullNames);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser14ShowFullNames);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser15ShowFullNames);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser16ShowFullNames);

            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser1Settings);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser2Settings);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser3Settings);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser4Settings);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser5Settings);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser6Settings);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser7Settings);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser8Settings);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser9Settings);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser10Settings);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser11Settings);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser12Settings);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser13Settings);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser14Settings);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser15Settings);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser16Settings);

            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser1SortAlpha);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser2SortAlpha);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser3SortAlpha);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser4SortAlpha);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser5SortAlpha);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser6SortAlpha);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser7SortAlpha);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser8SortAlpha);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser9SortAlpha);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser10SortAlpha);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser11SortAlpha);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser12SortAlpha);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser13SortAlpha);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser14SortAlpha);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser15SortAlpha);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser16SortAlpha);

            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser1SortAccess);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser2SortAccess);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser3SortAccess);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser4SortAccess);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser5SortAccess);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser6SortAccess);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser7SortAccess);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser8SortAccess);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser9SortAccess);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser10SortAccess);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser11SortAccess);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser12SortAccess);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser13SortAccess);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser14SortAccess);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser15SortAccess);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser16SortAccess);

            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser1);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser2);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser3);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser4);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser5);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser6);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser7);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser8);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser9);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser10);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser11);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser12);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser13);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser14);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser15);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser16);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser17);

            // Closed file undo
            HANDLE_CASE_RETURN_STRING(cmdidGlobalUndo);
            HANDLE_CASE_RETURN_STRING(cmdidGlobalRedo);

            // Call Browser Commands (No UI, Command window only).
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowserShowCallsToCmd);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowserShowCallsFromCmd);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowserShowNewCallsToCmd);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowserShowNewCallsFromCmd);

            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser1Search);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser2Search);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser3Search);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser4Search);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser5Search);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser6Search);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser7Search);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser8Search);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser9Search);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser10Search);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser11Search);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser12Search);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser13Search);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser14Search);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser15Search);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser16Search);

            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser1Refresh);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser2Refresh);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser3Refresh);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser4Refresh);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser5Refresh);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser6Refresh);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser7Refresh);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser8Refresh);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser9Refresh);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser10Refresh);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser11Refresh);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser12Refresh);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser13Refresh);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser14Refresh);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser15Refresh);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser16Refresh);

            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser1SearchCombo);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser2SearchCombo);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser3SearchCombo);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser4SearchCombo);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser5SearchCombo);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser6SearchCombo);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser7SearchCombo);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser8SearchCombo);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser9SearchCombo);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser10SearchCombo);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser11SearchCombo);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser12SearchCombo);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser13SearchCombo);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser14SearchCombo);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser15SearchCombo);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser16SearchCombo);

            // Task List
            HANDLE_CASE_RETURN_STRING(cmdidTaskListProviderCombo);
            HANDLE_CASE_RETURN_STRING(cmdidTaskListProviderComboList);

            // User Task toolbar commands
            HANDLE_CASE_RETURN_STRING(cmdidCreateUserTask);

            // Error List toolbar commands
            HANDLE_CASE_RETURN_STRING(cmdidErrorListShowErrors);
            HANDLE_CASE_RETURN_STRING(cmdidErrorListShowWarnings);
            HANDLE_CASE_RETURN_STRING(cmdidErrorListShowMessages);

            // Product activation (registration)
            HANDLE_CASE_RETURN_STRING(cmdidRegistration);

            // Callbrowser SearchComboList commands
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser1SearchComboList);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser2SearchComboList);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser3SearchComboList);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser4SearchComboList);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser5SearchComboList);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser6SearchComboList);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser7SearchComboList);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser8SearchComboList);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser9SearchComboList);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser10SearchComboList);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser11SearchComboList);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser12SearchComboList);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser13SearchComboList);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser14SearchComboList);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser15SearchComboList);
            HANDLE_CASE_RETURN_STRING(cmdidCallBrowser16SearchComboList);

            //Snippet window buttons
            HANDLE_CASE_RETURN_STRING(cmdidSnippetProp);
            HANDLE_CASE_RETURN_STRING(cmdidSnippetRef);
            HANDLE_CASE_RETURN_STRING(cmdidSnippetRepl);

            //Start Page Command
            HANDLE_CASE_RETURN_STRING(cmdidStartPage);

            // More editor commands
            HANDLE_CASE_RETURN_STRING(cmdidEditorLineFirstColumn);
            HANDLE_CASE_RETURN_STRING(cmdidEditorLineFirstColumnExtend);

            // Server Explorer Menu commands
            HANDLE_CASE_RETURN_STRING(cmdid_SE_ServerExplorer);
            HANDLE_CASE_RETURN_STRING(cmdid_SE_DataExplorer);

            // The following commands form guidDataCmdId.
            HANDLE_CASE_RETURN_STRING(icmdDesign);
            HANDLE_CASE_RETURN_STRING(icmdDesignOn);
            HANDLE_CASE_RETURN_STRING(icmdSEDesign);
            HANDLE_CASE_RETURN_STRING(icmdNewDiagram | cmdid_SE_ToolbarRefresh);
            HANDLE_CASE_RETURN_STRING(icmdNewTable);
            HANDLE_CASE_RETURN_STRING(icmdNewDBItem);
            HANDLE_CASE_RETURN_STRING(icmdNewTrigger);
            HANDLE_CASE_RETURN_STRING(icmdDebug);
            HANDLE_CASE_RETURN_STRING(icmdNewProcedure);
            HANDLE_CASE_RETURN_STRING(icmdNewQuery);
            HANDLE_CASE_RETURN_STRING(icmdRefreshLocal);

            HANDLE_CASE_RETURN_STRING(icmdDbAddDataConnection);
            HANDLE_CASE_RETURN_STRING(icmdDBDefDBRef);
            HANDLE_CASE_RETURN_STRING(icmdRunCmd);
            HANDLE_CASE_RETURN_STRING(icmdRunOn);
            HANDLE_CASE_RETURN_STRING(icmdidNewDBRef);
            HANDLE_CASE_RETURN_STRING(icmdidSetAsDef);
            HANDLE_CASE_RETURN_STRING(icmdidCreateCmdFile);
            HANDLE_CASE_RETURN_STRING(icmdCancel);
            HANDLE_CASE_RETURN_STRING(icmdNewDatabase);
            HANDLE_CASE_RETURN_STRING(icmdNewUser);
            HANDLE_CASE_RETURN_STRING(icmdNewRole);
            HANDLE_CASE_RETURN_STRING(icmdChangeLogin);
            HANDLE_CASE_RETURN_STRING(icmdNewView);
            HANDLE_CASE_RETURN_STRING(icmdModifyConnection);
            HANDLE_CASE_RETURN_STRING(icmdDisconnect);
            HANDLE_CASE_RETURN_STRING(icmdCopyScript);
            HANDLE_CASE_RETURN_STRING(icmdAddSCC);
            HANDLE_CASE_RETURN_STRING(icmdRemoveSCC);
            HANDLE_CASE_RETURN_STRING(icmdGetLatest);
            HANDLE_CASE_RETURN_STRING(icmdCheckOut);
            HANDLE_CASE_RETURN_STRING(icmdCheckIn);
            HANDLE_CASE_RETURN_STRING(icmdUndoCheckOut);
            HANDLE_CASE_RETURN_STRING(icmdAddItemSCC);
            HANDLE_CASE_RETURN_STRING(icmdNewPackageSpec);
            HANDLE_CASE_RETURN_STRING(icmdNewPackageBody);
            HANDLE_CASE_RETURN_STRING(icmdInsertSQL);
            HANDLE_CASE_RETURN_STRING(icmdRunSelection);
            HANDLE_CASE_RETURN_STRING(icmdUpdateScript);
            HANDLE_CASE_RETURN_STRING(icmdCreateScript);
            HANDLE_CASE_RETURN_STRING(icmdSECreateScript);
            HANDLE_CASE_RETURN_STRING(icmdNewScript);
            HANDLE_CASE_RETURN_STRING(icmdNewFunction);
            HANDLE_CASE_RETURN_STRING(icmdNewTableFunction);
            HANDLE_CASE_RETURN_STRING(icmdNewInlineFunction);

            HANDLE_CASE_RETURN_STRING(icmdAddDiagram);
            HANDLE_CASE_RETURN_STRING(icmdAddTable);
            HANDLE_CASE_RETURN_STRING(icmdAddSynonym);
            HANDLE_CASE_RETURN_STRING(icmdAddView);
            HANDLE_CASE_RETURN_STRING(icmdAddProcedure);
            HANDLE_CASE_RETURN_STRING(icmdAddFunction);
            HANDLE_CASE_RETURN_STRING(icmdAddTableFunction);
            HANDLE_CASE_RETURN_STRING(icmdAddInlineFunction);
            HANDLE_CASE_RETURN_STRING(icmdAddPkgSpec);
            HANDLE_CASE_RETURN_STRING(icmdAddPkgBody);
            HANDLE_CASE_RETURN_STRING(icmdAddTrigger);
            HANDLE_CASE_RETURN_STRING(icmdExportData);

            HANDLE_CASE_RETURN_STRING(icmdDbnsVcsAdd);
            HANDLE_CASE_RETURN_STRING(icmdDbnsVcsRemove);
            HANDLE_CASE_RETURN_STRING(icmdDbnsVcsCheckout);
            HANDLE_CASE_RETURN_STRING(icmdDbnsVcsUndoCheckout);
            HANDLE_CASE_RETURN_STRING(icmdDbnsVcsCheckin);
            HANDLE_CASE_RETURN_STRING(icmdSERetrieveData);
            HANDLE_CASE_RETURN_STRING(icmdSEEditTextObject);
            HANDLE_CASE_RETURN_STRING(icmdSERun);
            HANDLE_CASE_RETURN_STRING(icmdSERunSelection);
            HANDLE_CASE_RETURN_STRING(icmdDesignSQLBlock);
            HANDLE_CASE_RETURN_STRING(icmdRegisterSQLInstance);
            HANDLE_CASE_RETURN_STRING(icmdUnregisterSQLInstance);

            // Command Windows submenu commands 0x31xx
            HANDLE_CASE_RETURN_STRING(cmdidCommandWindowSaveScript);
            HANDLE_CASE_RETURN_STRING(cmdidCommandWindowRunScript);
            HANDLE_CASE_RETURN_STRING(cmdidCommandWindowCursorUp);
            HANDLE_CASE_RETURN_STRING(cmdidCommandWindowCursorDown);
            HANDLE_CASE_RETURN_STRING(cmdidCommandWindowCursorLeft);
            HANDLE_CASE_RETURN_STRING(cmdidCommandWindowCursorRight);
            HANDLE_CASE_RETURN_STRING(cmdidCommandWindowHistoryUp);
            HANDLE_CASE_RETURN_STRING(cmdidCommandWindowHistoryDown);

            // from datamenu.h
            HANDLE_CASE_RETURN_STRING(icmdidCmdDTStart);
            HANDLE_CASE_RETURN_STRING(icmdidCmdHeirarchyView0);
            HANDLE_CASE_RETURN_STRING(icmdidCmdHeirarchyView1);
            HANDLE_CASE_RETURN_STRING(icmdidCmdHeirarchyView2);
            HANDLE_CASE_RETURN_STRING(icmdidCmdHeirarchyView3);
            HANDLE_CASE_RETURN_STRING(icmdidCmdHeirarchyView4);
            HANDLE_CASE_RETURN_STRING(icmdidCmdHeirarchyView5);
            HANDLE_CASE_RETURN_STRING(icmdidCmdHeirarchyView6);
            HANDLE_CASE_RETURN_STRING(icmdidCmdHeirarchyView7);
            HANDLE_CASE_RETURN_STRING(icmdidCmdHeirarchyView8);

            HANDLE_CASE_RETURN_STRING(icmdidCmdModify);
            HANDLE_CASE_RETURN_STRING(icmdidCmdClose);
            HANDLE_CASE_RETURN_STRING(icmdidCmdDTLast);

            // Command ids for Server Explorer commands (guid_SE_CommandID group)
            //HANDLE_CASE_RETURN_STRING(cmdid_SE_ToolbarRefresh);    //Same with icmdNewDiagram
            HANDLE_CASE_RETURN_STRING(cmdid_SE_ToolbarStopRefresh);
            HANDLE_CASE_RETURN_STRING(cmdid_SE_AddToForm);
        default:
            FTLTRACEEX(FTL::tlWarning, TEXT("%s : GetStdIdCommandtring CAN NOT Find ID string for %d(0x%x)\n"),
                __FILE__LINE__, cmdID, cmdID);
            break;
        }
        return TEXT("Unknown");
    }


	LPCTSTR CFVSIPUtils::GetTextMakerTypeString(LONG nMarkerType)
	{
		switch(nMarkerType)
		{
			//enum MARKERTYPE
			HANDLE_CASE_RETURN_STRING(MARKER_INVISIBLE);		//0
			HANDLE_CASE_RETURN_STRING(MARKER_READONLY);			//1
			HANDLE_CASE_RETURN_STRING(MARKER_SHORTCUT);			//2
			HANDLE_CASE_RETURN_STRING(MARKER_BOOKMARK);			//3
			HANDLE_CASE_RETURN_STRING(MARKER_COMPILE_ERROR);	//4
			HANDLE_CASE_RETURN_STRING(MARKER_CODESENSE_ERROR);	//5
			HANDLE_CASE_RETURN_STRING(MARKER_OTHER_ERROR);		//6
			HANDLE_CASE_RETURN_STRING(MARKER_REGION_COLLAPSED);	//7
			HANDLE_CASE_RETURN_STRING(MARKER_REGION_EXPANDED);	//8
			HANDLE_CASE_RETURN_STRING(MARKER_LIST_LOCATION);	//9
			HANDLE_CASE_RETURN_STRING(DEF_MARKER_COUNT);		//10
			//HANDLE_CASE_RETURN_STRING(MARKER_IDENTERROR);		//MARKER_COMPILE_ERROR
			//HANDLE_CASE_RETURN_STRING(MARKER_SYNTAXERROR);	//MARKER_COMPILE_ERROR

			//enum MARKERTYPE2
			HANDLE_CASE_RETURN_STRING(MARKER_WARNING);			//11
			HANDLE_CASE_RETURN_STRING(MARKER_SPAN_MAPPING);		//12
			HANDLE_CASE_RETURN_STRING(MARKER_REGION_COLLAPSED_NOGLYPH);	//13
			HANDLE_CASE_RETURN_STRING(MARKER_REGION_EXPANDED_NOGLYPH);	//14
			HANDLE_CASE_RETURN_STRING(MARKER_EXSTENCIL);				//15
			HANDLE_CASE_RETURN_STRING(MARKER_EXSTENCIL_SELECTED);		//16
			HANDLE_CASE_RETURN_STRING(MARKER_SMARTTAG_NONVIS);			//17
			HANDLE_CASE_RETURN_STRING(MARKER_SMARTTAG_VIS);				//18
			HANDLE_CASE_RETURN_STRING(MARKER_TRACK_NONSAVE);			//19
			HANDLE_CASE_RETURN_STRING(MARKER_TRACK_SAVE);				//20
			HANDLE_CASE_RETURN_STRING(MARKER_BOOKMARK_DISABLED);		//21
			HANDLE_CASE_RETURN_STRING(MARKER_TRACK_PLACEHOLDER);		//22
			HANDLE_CASE_RETURN_STRING(MARKER_SMARTTAG_FACTOID);			//23
			HANDLE_CASE_RETURN_STRING(MARKER_SMARTTAG_EPHEMERAL);		//24
			HANDLE_CASE_RETURN_STRING(MARKER_BRACE_MATCHING);			//25
			HANDLE_CASE_RETURN_STRING(MARKER_EXSTENCIL_ENDMARKER);		//26
			HANDLE_CASE_RETURN_STRING(MARKER_CODEDEFWIN_BACKGROUND);	//27
			HANDLE_CASE_RETURN_STRING(MARKER_CODEDEFWIN_SELECTION);		//28
			HANDLE_CASE_RETURN_STRING(MARKER_HIGHLIGHT_PATH);			//29
			HANDLE_CASE_RETURN_STRING(MARKER_BRACE_MATCHING_BOLD);		//30
			HANDLE_CASE_RETURN_STRING(MARKER_REFACTORING_BACKGROUND);	//31
			HANDLE_CASE_RETURN_STRING(MARKER_EXSTENCIL_DEPFIELD);		//32
			HANDLE_CASE_RETURN_STRING(MARKER_REFACTORING_FIELD);		//33
			HANDLE_CASE_RETURN_STRING(MARKER_REFACTORING_DEPFIELD);		//34
			HANDLE_CASE_RETURN_STRING(DEF_MARKER_COUNT_NEW);			//35

			//HANDLE_CASE_RETURN_STRING(XXXXXXXXX);
		default:
			FTLTRACEEX(FTL::tlWarning, TEXT("%s : GetTextMakerTypeString CAN NOT Find Type string for %d(0x%x)\n"),
				__FILE__LINE__, nMarkerType, nMarkerType);
			break;
		}
		return TEXT("Unknown");
	}

	LPCTSTR CFVSIPUtils::GetMarkerBehaviorFlagsString(FTL::CFStringFormater& strFormater, DWORD dwBehaviorFlags)
	{
		//enum MARKERBEHAVIORFLAGS
		HANDLE_COMBINATION_VALUE_TO_STRING(strFormater, dwBehaviorFlags, MB_DEFAULT , TEXT("|"));
		HANDLE_COMBINATION_VALUE_TO_STRING(strFormater, dwBehaviorFlags, MB_LINESPAN , TEXT("|"));
		HANDLE_COMBINATION_VALUE_TO_STRING(strFormater, dwBehaviorFlags, MB_LEFTEDGE_LEFTTRACK , TEXT("|"));
		HANDLE_COMBINATION_VALUE_TO_STRING(strFormater, dwBehaviorFlags, MB_RIGHTEDGE_RIGHTTRACK , TEXT("|"));
		HANDLE_COMBINATION_VALUE_TO_STRING(strFormater, dwBehaviorFlags, MB_MULTILINESPAN , TEXT("|"));
		HANDLE_COMBINATION_VALUE_TO_STRING(strFormater, dwBehaviorFlags, MB_TRACK_EDIT_ON_RELOAD , TEXT("|"));

		//MARKERBEHAVIORFLAGS2
		HANDLE_COMBINATION_VALUE_TO_STRING(strFormater, dwBehaviorFlags, MB_DONT_DELETE_IF_ZEROLEN , TEXT("|"));
		HANDLE_COMBINATION_VALUE_TO_STRING(strFormater, dwBehaviorFlags, MB_INHERIT_FOREGROUND , TEXT("|"));
		HANDLE_COMBINATION_VALUE_TO_STRING(strFormater, dwBehaviorFlags, MB_INHERIT_BACKGROUND , TEXT("|"));
		HANDLE_COMBINATION_VALUE_TO_STRING(strFormater, dwBehaviorFlags, MB_VIEW_SPECIFIC , TEXT("|"));

		if (0 != dwBehaviorFlags)
		{
			FTLTRACEEX(tlWarning, TEXT("GetMarkerBehaviorFlagsString dwBehaviorFlags Remain IS NOT Zero [0x%0x]\n"), dwBehaviorFlags);
			//FTLASSERT(0 == dwBehaviorFlags);
		}
		return strFormater.GetString();
	}

	LPCTSTR CFVSIPUtils::GetMarkerVisualFlagsString(FTL::CFStringFormater& strFormater, DWORD dwVisualFlags)
	{
		//enum MARKERVISUAL
		HANDLE_COMBINATION_VALUE_TO_STRING(strFormater, dwVisualFlags, MV_GLYPH , TEXT("|"));
		HANDLE_COMBINATION_VALUE_TO_STRING(strFormater, dwVisualFlags, MV_COLOR_ALWAYS , TEXT("|"));
		HANDLE_COMBINATION_VALUE_TO_STRING(strFormater, dwVisualFlags, MV_COLOR_LINE_IF_NO_MARGIN , TEXT("|"));
		HANDLE_COMBINATION_VALUE_TO_STRING(strFormater, dwVisualFlags, MV_LINE , TEXT("|"));
		HANDLE_COMBINATION_VALUE_TO_STRING(strFormater, dwVisualFlags, MV_TIP_FOR_BODY , TEXT("|"));
		HANDLE_COMBINATION_VALUE_TO_STRING(strFormater, dwVisualFlags, MV_TIP_FOR_GLYPH , TEXT("|"));
		HANDLE_COMBINATION_VALUE_TO_STRING(strFormater, dwVisualFlags, MV_SEL_MARGIN_GLYPH , TEXT("|"));
		HANDLE_COMBINATION_VALUE_TO_STRING(strFormater, dwVisualFlags, MV_FORCE_INVISIBLE , TEXT("|"));
		HANDLE_COMBINATION_VALUE_TO_STRING(strFormater, dwVisualFlags, MV_BORDER , TEXT("|"));
		HANDLE_COMBINATION_VALUE_TO_STRING(strFormater, dwVisualFlags, MV_GLYPH_HOVER_CURSOR , TEXT("|"));
		HANDLE_COMBINATION_VALUE_TO_STRING(strFormater, dwVisualFlags, MV_DRAGGABLE_GLYPH , TEXT("|"));
		HANDLE_COMBINATION_VALUE_TO_STRING(strFormater, dwVisualFlags, MV_MULTILINE_GLYPH , TEXT("|"));
		HANDLE_COMBINATION_VALUE_TO_STRING(strFormater, dwVisualFlags, MV_CONTEXT_CONTRIBUTION_FOR_BODY , TEXT("|"));
		HANDLE_COMBINATION_VALUE_TO_STRING(strFormater, dwVisualFlags, MV_COLOR_SPAN_IF_ZERO_LENGTH , TEXT("|"));

		//enum MARKERVISUAL2
		HANDLE_COMBINATION_VALUE_TO_STRING(strFormater, dwVisualFlags, MV_SMARTTAG , TEXT("|"));
		HANDLE_COMBINATION_VALUE_TO_STRING(strFormater, dwVisualFlags, MV_TRACK , TEXT("|"));
		HANDLE_COMBINATION_VALUE_TO_STRING(strFormater, dwVisualFlags, MV_ROUNDEDBORDER , TEXT("|"));
		HANDLE_COMBINATION_VALUE_TO_STRING(strFormater, dwVisualFlags, MV_BOLDTEXT , TEXT("|"));
		HANDLE_COMBINATION_VALUE_TO_STRING(strFormater, dwVisualFlags, MV_DISALLOWBGCHANGE , TEXT("|"));
		HANDLE_COMBINATION_VALUE_TO_STRING(strFormater, dwVisualFlags, MV_DISALLOWFGCHANGE , TEXT("|"));
		HANDLE_COMBINATION_VALUE_TO_STRING(strFormater, dwVisualFlags, MV_FORCE_CLOSEST_IF_HIDDEN , TEXT("|"));
		HANDLE_COMBINATION_VALUE_TO_STRING(strFormater, dwVisualFlags, MV_SELECT_WHOLE_LINE , TEXT("|"));

		if (0 != dwVisualFlags)
		{
			FTLTRACEEX(tlWarning, TEXT("Waring: GetMarkerVisualFlagsString dwVisualFlags Remain IS NOT Zero [0x%0x]\n"), dwVisualFlags);
			//FTLASSERT(0 == dwVisualFlags);
		}
		return strFormater.GetString();
	}
#endif //FTL_DEBUG

#ifdef FTL_DEBUG

	HRESULT CFVsShellDumper::GetObjInfo(IInformationOutput* pInfoOutput)
	{
		HRESULT hr = E_POINTER;
		COM_VERIFY(pInfoOutput->OutputInfoName(TEXT("VsShell")));

		if (m_pObj)
		{
			CComQIPtr<IVsShell>     spVsShell(m_pObj);
			if (spVsShell)
			{
				CComPtr<IEnumPackages>	spEnumPackages;
				COM_VERIFY(spVsShell->GetPackageEnum(&spEnumPackages));
				CFEnumPackagesDumper	enumPackagesDumper(spEnumPackages, pInfoOutput, m_nIndent + 2);
				hr = S_OK;
			}
		}
		return hr;
	}

	HRESULT CFEnumPackagesDumper::GetObjInfo(IInformationOutput* pInfoOutput)
	{
		HRESULT hr = E_POINTER;
		COM_VERIFY(pInfoOutput->OutputInfoName(TEXT("EnumPackages")));

		if (m_pObj)
		{
			CComQIPtr<IEnumPackages>     spEnumPackages(m_pObj);
			if (spEnumPackages)
			{
				LONG nCount = 0;
				ULONG ulFetched = 0;
				CComPtr<IVsPackage> spVsPackage;
				while(SUCCEEDED(spEnumPackages->Next(1, &spVsPackage, &ulFetched)) && spVsPackage)
				{
					CFVsPackageDumper vsPackageDumper(spVsPackage, pInfoOutput, m_nIndent + 2);
					nCount++;
					spVsPackage.Release();
				}
				COM_VERIFY(pInfoOutput->OnOutput(TEXT("Packages Count"), nCount));
			}
		}
		return hr;
	}

	HRESULT CFVsPackageDumper::GetObjInfo(IInformationOutput* pInfoOutput)
	{
		HRESULT hr = E_POINTER;
		COM_VERIFY(pInfoOutput->OutputInfoName(TEXT("VsPackage")));

		if (m_pObj)
		{
			CComQIPtr<IVsPackage>     spVsPackage(m_pObj);
			if (spVsPackage)
			{
				BOOL bClosed = FALSE;
				COM_VERIFY(spVsPackage->QueryClose(&bClosed));
				pInfoOutput->OnOutput(TEXT("Close"), bClosed ? TEXT("TRUE") : TEXT("FALSE"));

				//GetPropertyPage

				//判断这个Package是否有Splash信息
				CComQIPtr<IVsInstalledProduct> spVsInstalledProduct(spVsPackage);
				if (spVsInstalledProduct)
				{
					CFVsInstalledProductDumper installedProductDumper(spVsInstalledProduct, pInfoOutput, m_nIndent + 2);
				}

				hr = S_OK;
			}
		}
		return hr;
	}

	HRESULT CFVsInstalledProductDumper::GetObjInfo(IInformationOutput* pInfoOutput)
	{
		HRESULT hr = E_POINTER;
		COM_VERIFY(pInfoOutput->OutputInfoName(TEXT("VsInstalledProduct")));

		if (m_pObj)
		{
			CComQIPtr<IVsInstalledProduct>     spVsInstalledProduct(m_pObj);
			if (spVsInstalledProduct)
			{
				CComBSTR bstrOfficialName;
				COM_VERIFY(spVsInstalledProduct->get_OfficialName(&bstrOfficialName));
				COM_VERIFY(pInfoOutput->OnOutput(TEXT("OfficialName"), &bstrOfficialName));

				CComBSTR bstrProductID;
				COM_VERIFY(spVsInstalledProduct->get_ProductID(&bstrProductID));
				COM_VERIFY(pInfoOutput->OnOutput(TEXT("ProductID"), &bstrProductID));

				CComBSTR bstrProductDetails;
				COM_VERIFY(spVsInstalledProduct->get_ProductDetails(&bstrProductDetails));
				COM_VERIFY(pInfoOutput->OnOutput(TEXT("ProductDetails"), &bstrProductDetails));

				UINT idBmp = 0;
				COM_VERIFY(spVsInstalledProduct->get_IdBmpSplash(&idBmp));
				COM_VERIFY(pInfoOutput->OnOutput(TEXT("IdBmpSplash"), (DWORD)idBmp));

				UINT idIcoLogoForAboutbox = 0;
				COM_VERIFY(spVsInstalledProduct->get_IdIcoLogoForAboutbox(&idIcoLogoForAboutbox));
				COM_VERIFY(pInfoOutput->OnOutput(TEXT("IdIcoLogoForAboutbox"), (DWORD)idIcoLogoForAboutbox));
			}
		}
		return hr;
	}

	

	HRESULT CFVsUIShellDumper::GetObjInfo(IInformationOutput* pInfoOutput)
	{
		HRESULT hr = E_POINTER;
		COM_VERIFY(pInfoOutput->OutputInfoName(TEXT("VsUIShell")));

		if (m_pObj)
		{
			//在VS2008中可QI出 IVsUIShell ~ IVsUIShell3
			CComQIPtr<IVsUIShell>     spVsUIShell(m_pObj);
			if (spVsUIShell)
			{
				CComBSTR bstrAppName;
				COM_VERIFY(spVsUIShell->GetAppName(&bstrAppName));
				COM_VERIFY(pInfoOutput->OnOutput(TEXT("AppName"), &bstrAppName));  //如 Microsoft Visual Studio

				HWND hWndOwner = NULL;
				COM_VERIFY(spVsUIShell->GetDialogOwnerHwnd(&hWndOwner));
				COM_VERIFY(pInfoOutput->OnOutput(TEXT("DialogOwnerHwnd"), hWndOwner));

				CComPtr<IEnumWindowFrames> spToolWindowEnum;
				COM_VERIFY(spVsUIShell->GetToolWindowEnum(&spToolWindowEnum));
				if (SUCCEEDED(hr) && spToolWindowEnum)
				{
					COM_VERIFY(pInfoOutput->OnOutput(TEXT("ToolWindowEnum")));
					CFEnumWindowFramesDumper toolWindowEnumDumper(spToolWindowEnum, pInfoOutput, m_nIndent + 2);
				}

				CComPtr<IEnumWindowFrames> spDocumentWindowEnum;
				COM_VERIFY(spVsUIShell->GetDocumentWindowEnum(&spDocumentWindowEnum));
				if (SUCCEEDED(hr) && spDocumentWindowEnum)
				{
					COM_VERIFY(pInfoOutput->OnOutput(TEXT("DocumentWindowEnum")));
					CFEnumWindowFramesDumper documentWindowEnumDumper(spDocumentWindowEnum, pInfoOutput, m_nIndent + 2);
				}
			}
		}
		return hr;
	}

	HRESULT CFEnumWindowFramesDumper::GetObjInfo(IInformationOutput* pInfoOutput)
	{
		HRESULT hr = E_POINTER;
		COM_VERIFY(pInfoOutput->OutputInfoName(TEXT("EnumWindowFrames")));

		if (m_pObj)
		{
			CComQIPtr<IEnumWindowFrames>     spEnumWindowFrames(m_pObj);
			if (spEnumWindowFrames)
			{
				LONG nCount = 0;
				COM_VERIFY(spEnumWindowFrames->Reset());

				CComPtr<IVsWindowFrame> spVsWindowFrame;
				ULONG ulFetched = 0;

				while (SUCCEEDED(spEnumWindowFrames->Next(1, &spVsWindowFrame, &ulFetched)) && ulFetched > 0)
				{
					FTLASSERT(1 == ulFetched );
					nCount++;
					pInfoOutput->OnOutput(TEXT("Enum Window Frame Index"), nCount);
					//COM_DETECT_INTERFACE_FROM_LIST(spVsWindowFrame);
					//COM_DETECT_INTERFACE_FROM_REGISTER(spVsWindowFrame);
					CFVsWindowFrameDumper windowFrameDumper(spVsWindowFrame, pInfoOutput, m_nIndent + 2);
					
					spVsWindowFrame.Release();
				}
				pInfoOutput->OnOutput(TEXT("Window Frame Count"), nCount);
				hr = S_OK;
			}
		}
		return hr;
	}


	HRESULT CFVsTextManagerDumper::GetObjInfo(IInformationOutput* pInfoOutput)
	{
		HRESULT hr = E_POINTER;
		COM_VERIFY(pInfoOutput->OutputInfoName(TEXT("VsTextManager")));

		if (m_pObj)
		{
			//可以QI出
			//	IVsTextManager/IVsTextManager2/IVsHiddenTextManager/IVsProvideColorableItems/IVsSyntheticTextManager
			//	IVsFontAndColorDefaultsProvider/IVsCodePageSelection/IVsDefaultButtonBarImages/IVsTextMacroHelper
			//	IVsPersistSolutionOpts/IVsTextMarkerColorSet/IVsTextEditorPropertyCategoryContainer
			//	IConnectionPointContainer/IVsFileChangeEvents/IVsBroadcastMessageEvents
			//	IObjectWithSite/
			CComQIPtr<IVsTextManager>     spVsTextManager(m_pObj);
			if (spVsTextManager)
			{
				USES_CONVERSION;
				FTL::CFStringFormater formater;

				LANGPREFERENCES langPrefArray[1] = {0};
				LANGPREFERENCES& langPref = langPrefArray[0];

				//TODO: 调用参数错误 ?
				COM_VERIFY_EXCEPT1(spVsTextManager->GetPerLanguagePreferences(&langPrefArray[0]), E_FAIL);
				if (SUCCEEDED(hr))
				{
					LPOLESTR strGUID = NULL;
					COM_VERIFY(StringFromIID(langPref.guidLang, &strGUID));

					//szFileType=%s,
					formater.Format(
						TEXT("fShowCompletion=%d,fShowSmartIndent=%d,fHideAdvancedAutoListMembers=%d\n")
						TEXT("uTabSize=%d,uIndentSize=%d,fInsertTabs=%d,IndentStyle=%d,fAutoListMembers=%d,fAutoListParams=%d\n")
						TEXT("fVirtualSpace=%d,fWordWrap=%d,fTwoWayTreeview=%d,fHotURLs=%d,fDropdownBar=%d,fLineNumbers=%d\n")
						TEXT("guidLang=%s\n"),
						/*CA2T(langPreferences.szFileType),*/ 
						langPref.fShowCompletion,langPref.fShowSmartIndent,langPref.fHideAdvancedAutoListMembers,
						langPref.uTabSize,langPref.uIndentSize,langPref.fInsertTabs,
						langPref.IndentStyle,langPref.fAutoListMembers,langPref.fAutoListParams,
						langPref.fVirtualSpace,langPref.fWordWrap,langPref.fTwoWayTreeview,
						langPref.fHotURLs,langPref.fDropdownBar,langPref.fLineNumbers,
						COLE2T(strGUID));

					COM_VERIFY(pInfoOutput->OnOutput(TEXT("PerLanguagePreferences"), formater.GetString()));

					CoTaskMemFree(strGUID);
				}

				long nMarkerTypeCount = 0;
				COM_VERIFY(spVsTextManager->GetMarkerTypeCount(&nMarkerTypeCount));
				COM_VERIFY(pInfoOutput->OnOutput(TEXT("MarkerTypeCount"), nMarkerTypeCount));

				for (long nMarkerTypeIndex = 0; nMarkerTypeIndex < nMarkerTypeCount; ++nMarkerTypeIndex)
				{
					CComPtr<IVsTextMarkerType>	spTextMarkerType;

					COM_VERIFY_EXCEPT1(spVsTextManager->GetMarkerTypeInterface(nMarkerTypeIndex, &spTextMarkerType), E_FAIL);
					if (SUCCEEDED(hr) && spTextMarkerType)
					{
						COM_VERIFY(pInfoOutput->OnOutput(TEXT("<MarkerTypeIndex>"), nMarkerTypeIndex));
						CFVsTextMarkerTypeDumper      vsTextMarkerTypeDumper(spTextMarkerType, pInfoOutput, m_nIndent + 2);
					}
					else
					{
						//Some MarkerType package file is deleted from disk ?
						FTLTRACEEX(FTL::tlError, TEXT("GetMarkerTypeInterface Error, Index=%d, Error= 0x%08x\n"), 
							nMarkerTypeIndex, hr);
					}
				}

				//TODO: 第一个参数传入 NULL， 返回 E_INVALIDARG
				CComPtr<IVsEnumTextViews> spVsEnumTextViews;
				COM_VERIFY_EXCEPT1(spVsTextManager->EnumViews(NULL, &spVsEnumTextViews), E_INVALIDARG);
				if (SUCCEEDED(hr) && spVsEnumTextViews)
				{
					CFVsEnumTextViewsDumper vsEnumTextViewsDumper(spVsEnumTextViews, pInfoOutput, m_nIndent + 2);
				}

				//TODO: IVsTextManager::EnumBuffers 尚未实现
				CComPtr<IVsEnumTextBuffers> spVsEnumTextBuffers;
				COM_VERIFY_EXCEPT1(spVsTextManager->EnumBuffers(&spVsEnumTextBuffers), E_NOTIMPL);
				if (SUCCEEDED(hr) && spVsEnumTextBuffers)
				{
					CFVsEnumTextBuffersDumper vsEnumTextBuffersDumper(spVsEnumTextBuffers, pInfoOutput, m_nIndent + 2);
				}
			}
		}
		return hr;
	}

	HRESULT CFVsTextMarkerTypeDumper::GetObjInfo(IInformationOutput* pInfoOutput)
	{
		HRESULT hr = E_POINTER;
		COM_VERIFY(pInfoOutput->OutputInfoName(TEXT("VsTextMarkerType")));

		if (m_pObj)
		{
			COM_DETECT_INTERFACE_FROM_REGISTER(m_pObj);

			//可以QI出
			//	IVsMergeableUIItem/IVsHiColorItem/IVsTextMarkerType
			CComQIPtr<IVsTextMarkerType>     spVsTextMarkerType(m_pObj);
			if (spVsTextMarkerType)
			{
				CComBSTR bstrDisplayName;
				COM_VERIFY_EXCEPT1(spVsTextMarkerType->GetDisplayName(&bstrDisplayName), E_FAIL);
				if (SUCCEEDED(hr))
				{
					COM_VERIFY(pInfoOutput->OnOutput(TEXT("DisplayName"), &bstrDisplayName));
				}
				else
				{
					COM_VERIFY(pInfoOutput->OnOutput(TEXT("DisplayName"), TEXT("(null)")));
				}
				
				LONG nPriorityIndex = 0;
				COM_VERIFY(spVsTextMarkerType->GetPriorityIndex(&nPriorityIndex));
				pInfoOutput->OnOutput(TEXT("PriorityIndex"), nPriorityIndex);

				DWORD dwVisualFlags = 0;
				COM_VERIFY(spVsTextMarkerType->GetVisualStyle(&dwVisualFlags));
				if (SUCCEEDED(hr))
				{
					CFStringFormater strVisualFlagsFormater;
					pInfoOutput->OnOutput(TEXT("VisualStyle"), CFVSIPUtils::GetMarkerVisualFlagsString(strVisualFlagsFormater, dwVisualFlags));
				}
				

				DWORD dwBehaviorFlags = 0;
				COM_VERIFY(spVsTextMarkerType->GetBehaviorFlags(&dwBehaviorFlags));
				if (SUCCEEDED(hr))
				{
					CFStringFormater strBehaviorFlagsFormater;
					CFVSIPUtils::GetMarkerBehaviorFlagsString(strBehaviorFlagsFormater, dwBehaviorFlags);
					pInfoOutput->OnOutput(TEXT("BehaviorFlags"), strBehaviorFlagsFormater.GetString());
				}

				COLORINDEX iForeground = (COLORINDEX)(-1);
				COLORINDEX iBackground = (COLORINDEX)(-1);
				//"Compiler Error/Syntax Error" will return E_FAIL
				//"VA X Spelling Error/VA X Syntax Error" will return E_NOTIMPL
				//"SQL DML Marker" return E_UNEXPECTED
				hr = spVsTextMarkerType->GetDefaultColors(&iForeground, &iBackground);
				//if (SUCCEEDED(hr))
				{
					COM_VERIFY(pInfoOutput->OnOutput(TEXT("Foreground"), (LONG)iForeground));
					COM_VERIFY(pInfoOutput->OnOutput(TEXT("Background"), (LONG)iBackground));
				}
				
			}
		}
		return hr;
	}

	HRESULT CFVsSolutionDumper::GetObjInfo(IInformationOutput* pInfoOutput)
	{
		HRESULT hr = E_POINTER;
		COM_VERIFY(pInfoOutput->OutputInfoName(TEXT("VsSolution")));

		if (m_pObj)
		{
			//可以QI出(注意：不能QI到 IServiceProvider)
			//	IVsSolution3/IVsCreateAggregateProject/IVsFileBackup
			//	IVsOpenProjectOrSolutionDlg/IVsPersistSolutionOpts/
			//	IVsTrackProjectDocumentsEvents2/IVsFireSolutionEvents/IVsFireSolutionEvents2/IVsFileChangeEvents/IOleCommandTarget
			//COM_DETECT_INTERFACE_FROM_LIST(m_pObj);
			CComQIPtr<IVsSolution>     spVsSolution(m_pObj);
			if (spVsSolution)
			{
				CComBSTR bstrSolutionDirectory;
				CComBSTR bstrSolutionFile;
				CComBSTR bstrUserOptsFile;

				//if no solution open ,then return FALSE
				COM_VERIFY_EXCEPT1(spVsSolution->GetSolutionInfo(&bstrSolutionDirectory, &bstrSolutionFile, &bstrUserOptsFile), S_FALSE);
				if (S_OK == hr)
				{
					COM_VERIFY(pInfoOutput->OnOutput(TEXT("SolutionDirectory"), bstrSolutionDirectory));
					COM_VERIFY(pInfoOutput->OnOutput(TEXT("SolutionFile"), bstrSolutionFile));
					COM_VERIFY(pInfoOutput->OnOutput(TEXT("UserOptsFile"), bstrUserOptsFile));
				}

				//Project Name
				ULONG nProjectsFetched = 0;
				COM_VERIFY(spVsSolution->GetProjectFilesInSolution (0, 0,NULL, &nProjectsFetched));
				if (SUCCEEDED(hr) && nProjectsFetched > 0)
				{
					CComBSTR* pNameArray = new CComBSTR[nProjectsFetched];
					COM_VERIFY(spVsSolution->GetProjectFilesInSolution(0,nProjectsFetched, &pNameArray[0], &nProjectsFetched));
					for (ULONG nIndex = 0; nIndex < nProjectsFetched; ++nIndex)
					{
						CFStringFormater formater;
						formater.Format(TEXT("Project Index=%d, Name=%s"), nIndex, COLE2T(pNameArray[nIndex]));
						pInfoOutput->OnOutput(TEXT("ProjectFilesInSolution"), formater.GetString());
					}
					delete [] pNameArray;
				}

				//GetProperty

				CComPtr<IEnumHierarchies>	spEnumHierarchies;
				
				COM_VERIFY(spVsSolution->GetProjectEnum(EPF_ALLPROJECTS, GUID_NULL, &spEnumHierarchies));
				if (spEnumHierarchies)
				{
					CComPtr<IVsHierarchy> spVsHierarchy;
					ULONG ulFetched = 0;

					COM_VERIFY_EXCEPT1(spEnumHierarchies->Next(1,&spVsHierarchy, &ulFetched), S_FALSE);
					while (SUCCEEDED(hr) && ulFetched == 1)
					{
						//COM_DETECT_INTERFACE_FROM_LIST(spVsHierarchy);
						//COM_DETECT_INTERFACE_FROM_REGISTER(spVsHierarchy);
						CFVsHierarchyDumper hierarchyDumper(spVsHierarchy, pInfoOutput, m_nIndent + 2);

						spVsHierarchy.Release();
						COM_VERIFY_EXCEPT1(spEnumHierarchies->Next(1,&spVsHierarchy, &ulFetched), S_FALSE);
					}
				}
				hr = S_OK;
			}
		}
		return hr;
	}

	HRESULT CFVsProjectDumper::GetObjInfo(IInformationOutput* pInfoOutput)
	{
		HRESULT hr = E_POINTER;
		COM_VERIFY(pInfoOutput->OutputInfoName(TEXT("VsProject")));

		if (m_pObj)
		{
			CComQIPtr<IVsProject>     spVsProject(m_pObj);
			if (spVsProject)
			{
				CComBSTR bstrRoot;
				COM_VERIFY(spVsProject->GetMkDocument(VSITEMID_ROOT, &bstrRoot));
			}
		}
		return hr;
	}

	HRESULT CFVsHierarchyDumper::DumpAllPropertiesInfo(IVsHierarchy* pParent, VSITEMID ItemId, IInformationOutput* pInfoOutput)
	{
		pInfoOutput->OnOutput(TEXT("VsHierarchy ItemId"), (long)ItemId);
#pragma warning(disable : 4245)
		static const LONG_PTR checkPrperties[] = 
		{
			//enum __VSHPROPID
			VSHPROPID_Parent,
			VSHPROPID_FirstChild,
			VSHPROPID_NextSibling,
			VSHPROPID_Root,
			VSHPROPID_TypeGuid,
			VSHPROPID_SaveName,
			VSHPROPID_Caption,
			VSHPROPID_IconImgList,
			VSHPROPID_IconIndex,
			VSHPROPID_Expandable,
			VSHPROPID_ExpandByDefault,
			//VSHPROPID_ProjectName,
			VSHPROPID_Name,
			VSHPROPID_IconHandle,
			VSHPROPID_OpenFolderIconHandle,
			VSHPROPID_OpenFolderIconIndex,
			VSHPROPID_CmdUIGuid,
			VSHPROPID_SelContainer,

			//工程文件 如 .vcproj 可获取	
			//	IVsPerPropertyBrowsing/IProvidePropertyBuilder/IPerPropertyBrowsing/IVsGetCfgProvider
			//	IConnectionPointContainer/
			//	ISpecifyPropertyPages/IOleCommandTarget/IVsBrowseObject
			VSHPROPID_BrowseObject,
			VSHPROPID_AltHierarchy,
			VSHPROPID_AltItemid,
			VSHPROPID_ProjectDir,
			VSHPROPID_SortPriority,

			//可获取
			//	IVsUserContext/
			VSHPROPID_UserContext,
			VSHPROPID_EditLabel,

			//工程文件 如 .vcproj 可获取
			//	ISupportVSProperties/Project
			VSHPROPID_ExtObject,
			VSHPROPID_ExtSelectedItem,
			VSHPROPID_StateIconIndex,
			//VSHPROPID_ProjectType,
			VSHPROPID_TypeName,
			//VSHPROPID_ReloadableProjectFile,
			VSHPROPID_HandlesOwnReload,

			//工程文件 如 .vcproj(其Parent为Solution)，也是IVsHierarchy，可获取 
			//	IVsOpenProjectOrSolutionDlg/IVsPersistSolutionOpts/IVsSolution3/IVsCreateAggregateProject
			//	IVsFireSolutionEvents2/IVsCfgProvider/IVsFileChangeEvents
			VSHPROPID_ParentHierarchy,
			VSHPROPID_ParentHierarchyItemid,
			VSHPROPID_ItemDocCookie,
			VSHPROPID_Expanded,

			//工程文件 如 .vcproj 可获取
			//	IVsProjectResources/IVsSccProject2/IVsCfgProvider2/IVsUpdateSolutionEvents/IVsAggregatableProject 等
			VSHPROPID_ConfigurationProvider,		//OBSOLETE. Use IVsGetCfgProvider
			VSHPROPID_ImplantHierarchy,
			VSHPROPID_OwnerKey,
			VSHPROPID_StartupServices,
			VSHPROPID_FirstVisibleChild,
			VSHPROPID_NextVisibleSibling,
			VSHPROPID_IsHiddenItem,
			VSHPROPID_IsNonMemberItem,
			VSHPROPID_IsNonLocalStorage,
			VSHPROPID_StorageType,
			VSHPROPID_ItemSubType,
			VSHPROPID_OverlayIconIndex,
			VSHPROPID_DefaultNamespace,
			VSHPROPID_IsNonSearchable,
			VSHPROPID_IsFindInFilesForegroundOnly,
			VSHPROPID_CanBuildFromMemory,
			VSHPROPID_PreferredLanguageSID,
			VSHPROPID_ShowProjInSolutionPage,
			VSHPROPID_AllowEditInRunMode,
			VSHPROPID_IsNewUnsavedItem,
			VSHPROPID_ShowOnlyItemCaption,
			VSHPROPID_ProjectIDGuid,
			VSHPROPID_DesignerVariableNaming,
			VSHPROPID_DesignerFunctionVisibility,
			VSHPROPID_HasEnumerationSideEffects,
			VSHPROPID_DefaultEnableBuildProjectCfg,
			VSHPROPID_DefaultEnableDeployProjectCfg,

			//enum __VSHPROPID2
			VSHPROPID_PropertyPagesCLSIDList,
			VSHPROPID_CfgPropertyPagesCLSIDList,
			VSHPROPID_ExtObjectCATID,
			VSHPROPID_BrowseObjectCATID,
			VSHPROPID_CfgBrowseObjectCATID,
			VSHPROPID_AddItemTemplatesGuid,
			VSHPROPID_ChildrenEnumerated,
			VSHPROPID_StatusBarClientText,
			VSHPROPID_DebuggeeProcessId,
			VSHPROPID_IsLinkFile,
			VSHPROPID_KeepAliveDocument,
			VSHPROPID_SupportsProjectDesigner,
			VSHPROPID_IntellisenseUnknown,
			VSHPROPID_IsUpgradeRequired,
			VSHPROPID_DesignerHiddenCodeGeneration,
			VSHPROPID_SuppressOutOfDateMessageOnBuild,
			VSHPROPID_Container,
			VSHPROPID_UseInnerHierarchyIconList,
			VSHPROPID_EnableDataSourceWindow,
			VSHPROPID_AppTitleBarTopHierarchyName,

			//可以获取到 XXX\VC\atlmfc\src\mfc; XXX\VC\atlmfc\src\mfcm; 等得路径
			VSHPROPID_DebuggerSourcePaths,
			VSHPROPID_CategoryGuid,
			VSHPROPID_DisableApplicationSettings,
			VSHPROPID_ProjectDesignerEditor,
			VSHPROPID_PriorityPropertyPagesCLSIDList,
			VSHPROPID_NoDefaultNestedHierSorting,
			VSHPROPID_ExcludeFromExportItemTemplate,
			VSHPROPID_SupportedMyApplicationTypes,
		};
#pragma warning(default : 4245)

		HRESULT hr = E_FAIL;
		for(int checkIndex = 0; checkIndex < _countof(checkPrperties); ++checkIndex)
		{
			CComVariant varProperty;
			hr = pParent->GetProperty(ItemId, checkPrperties[checkIndex], &varProperty);
			if (SUCCEEDED(hr) && VT_EMPTY != varProperty.vt)
			{
				pInfoOutput->OnOutput(
					CFVSIPUtils::GetVSHPropIdString(checkPrperties[checkIndex]), &varProperty);
			}
		}
		return S_OK;
	}

	HRESULT CFVsHierarchyDumper::EnumAllChildRen(IVsHierarchy* pParent, VSITEMID startItemId, IInformationOutput* pInfoOutput)
	{
		HRESULT hr = E_POINTER;
		if (!pParent)
		{
			return E_POINTER;
		}

		//Check Children
		CComVariant varChildId;
		COM_VERIFY(pParent->GetProperty(startItemId, VSHPROPID_FirstChild, &varChildId));
		VSITEMID idChild = varChildId.lVal;
		if (SUCCEEDED(hr) && VSITEMID_NIL != idChild )
		{
			CComBSTR bstrCanonicalName;
			COM_VERIFY(pParent->GetCanonicalName(idChild, &bstrCanonicalName));
			COM_VERIFY(pInfoOutput->OnOutput(TEXT("CanonicalName"), &bstrCanonicalName));

			//CComVariant varChildPtr;
			//DumpAllPropertiesInfo(pParent, idChild, pInfoOutput);

			//Enum first child children
			BOOL bHasChild = CFVSIPUtils::IsVsHierarchyHasChildren(pParent, idChild);
			if (bHasChild)
			{
				EnumAllChildRen(pParent, idChild, pInfoOutput);
			}

			//check Sibling
			CComVariant varSibling;
			COM_VERIFY(pParent->GetProperty(idChild, VSHPROPID_NextSibling, &varSibling));
			VSITEMID idSibling = varSibling.lVal;
			while (SUCCEEDED(hr) && VSITEMID_NIL != idSibling)
			{
				CComBSTR bstrCanonicalName;
				COM_VERIFY(pParent->GetCanonicalName(idSibling, &bstrCanonicalName));
				COM_VERIFY(pInfoOutput->OnOutput(TEXT("CanonicalName"), &bstrCanonicalName));

				bHasChild = CFVSIPUtils::IsVsHierarchyHasChildren(pParent, idSibling);
				if (bHasChild)
				{
					EnumAllChildRen(pParent, idSibling, pInfoOutput);
				}
				//DumpAllPropertiesInfo(pParent, idSibling, pInfoOutput);

				
				CComVariant varExpandable;
				COM_VERIFY(pParent->GetProperty(idSibling, VSHPROPID_NextSibling, &varSibling));
				idSibling = varSibling.lVal;
			}
		}
		return hr;
	}

	HRESULT CFVsHierarchyDumper::GetObjInfo(IInformationOutput* pInfoOutput)
	{
		HRESULT hr = E_POINTER;
		COM_VERIFY(pInfoOutput->OutputInfoName(TEXT("VsHierarchy")));
		if (m_pObj)
		{
			//大部分可以QI出(?)
			//	IVsPersistHierarchyItem/IPersistFileFormat/IVsHierarchyDeleteHandler/IVsUIHierWinClipboardHelperEvents
			//	IVsHierarchyDropDataTarget/IVsHierarchyDropDataSource/IVsExtensibleObject/IVsSupportItemHandoff/
			//	IVsUIHierarchy

			//如果是工程文件(.vcprj), 可以QI出	
			//	IVsProject[0~3]/IVsProjectResources/IVsProjectSpecificEditorMap/IVsProjectSpecialFiles/IVsProjectCfgProvider
			//	IVsDependencyProvider/IVsUpdateSolutionEvents/IVsCfgProvider/IVsAggregatableProject
			//
			CComQIPtr<IVsHierarchy>     spIVsHierarchy(m_pObj);
			if (spIVsHierarchy)
			{
				CComBSTR bstCanonicalName;
				COM_VERIFY(spIVsHierarchy->GetCanonicalName(VSITEMID_ROOT, &bstCanonicalName));
				COM_VERIFY(pInfoOutput->OnOutput(TEXT("CanonicalName"), &bstCanonicalName));
				
				CComVariant varName;
				COM_VERIFY(spIVsHierarchy->GetProperty(VSITEMID_ROOT, VSHPROPID_Name, &varName));
				if (SUCCEEDED(hr))
				{
					COM_VERIFY(pInfoOutput->OnOutput(TEXT("VSHPROPID_Name"), &varName.bstrVal));

				}
				DumpAllPropertiesInfo(spIVsHierarchy, VSITEMID_ROOT, pInfoOutput);

				EnumAllChildRen(spIVsHierarchy, VSITEMID_ROOT, pInfoOutput);
				//CComVariant varTypeGuid;
				//COM_VERIFY(spIVsHierarchy->GetProperty(VSITEMID_ROOT, VSHPROPID_TypeGuid, &varTypeGuid));
				//if (varTypeGuid.vt == VT_BSTR)
				//{
				//	CLSID typeGUID = {0};
				//	CLSIDFromString(varTypeGuid.bstrVal, &typeGUID);
				//	if (InlineIsEqualGUID(typeGUID, GUID_ItemType_PhysicalFile))
				//	{
				//		FTLASSERT(FALSE);
				//	}
				//}
			}
		}
		return hr;
	}

    HRESULT CFVsWindowFrameDumper::GetObjInfo(IInformationOutput* pInfoOutput)
    {
        HRESULT hr = E_POINTER;
        COM_VERIFY(pInfoOutput->OutputInfoName(TEXT("VsWindowFrame")));

        if (m_pObj)
        {
			//可QI出 
			//	IVsWindowFrame/IVsWindowFrame2/IVsHasRelatedSaveItems
			//	IVsRunningDocTableEvents2/IVsHierarchyEvents/IVsRunningDocTableEvents/IOleCommandTarget
            CComQIPtr<IVsWindowFrame>     spVsWindowFrame(m_pObj);
            if (spVsWindowFrame)
            {
				CComVariant varCaption;
				COM_VERIFY(spVsWindowFrame->GetProperty(VSFPROPID_Caption, &varCaption));
				if (SUCCEEDED(hr))
				{
					pInfoOutput->OnOutput(TEXT("FrameWindow Caption"), &V_BSTR(&varCaption));
				}

				CComVariant varType;
				COM_VERIFY(spVsWindowFrame->GetProperty(VSFPROPID_Type, &varType));
				FTLASSERT(V_VT(&varType) == VT_I4);

				switch(V_I4(&varType))
				{
				case 1: //Document Frame
					{
						//COM_DETECT_VIEW_INTERFACE_FROM_REGISTER(spVsWindowFrame);

						//可以获取
						//  .hpp/.cpp -- IVsTextFind/IVsCodeWindow[Ex]/IVsTextLayer[0-2]/IVsHighlight/IVsExpansion/IVsTextBufferEx
						CComPtr<IVsCodeWindow> spVsCodeWindow;
						COM_VERIFY(spVsWindowFrame->QueryViewInterface(IID_IVsCodeWindow, (void**)&spVsCodeWindow));
						if (SUCCEEDED(hr) && spVsCodeWindow)
						{
							pInfoOutput->OnOutput(TEXT("WindowFrame is Document Frame"));
							CFVsCodeWindowDumper codeWindowDumper(spVsCodeWindow, pInfoOutput, m_nIndent + 2);
						}

						CComVariant varHierarchy;
						COM_VERIFY(spVsWindowFrame->GetProperty(VSFPROPID_Hierarchy, &varHierarchy));
						if (SUCCEEDED(hr) && V_UNKNOWN(&varHierarchy))
						{
							CComQIPtr<IVsHierarchy>		spVsHierarchy(V_UNKNOWN(&varHierarchy));
							COM_DETECT_INTERFACE_FROM_REGISTER(spVsHierarchy);
							CFVsHierarchyDumper	vsHierarchyDumper(spVsHierarchy, pInfoOutput, m_nIndent + 2);
						}
					}
					break;
				case 2:   //Tool Frame
					{
						//COM_DETECT_VIEW_INTERFACE_FROM_REGISTER(spVsWindowFrame);

						//可以获取
						//  Solution Explorer -- IVsWindowPaneCommit/IVsUIHierarchyWindow[0-2]
						//  Properties -- IVsWindowPaneCommit
						//	Toolbox -- IVsToolbox[0-3]/IVsExtensibleObject
						//	Resource View -- IVsMultiItemSelect/IVsNavigationTool
						//	Macro Explorer -- IVsWindowPaneCommit/IVsUIHierarchyWindow[0-2]
						//	Output -- IVsOutputWindow[0-2]/IVsTextView/IVsFindTarget
						pInfoOutput->OnOutput(TEXT("WindowFrame is Tool Frame"));

						CComVariant varCreateToolWinFlags;
						COM_VERIFY_EXCEPT1(spVsWindowFrame->GetProperty(VSFPROPID_CreateToolWinFlags, &varCreateToolWinFlags), DISP_E_MEMBERNOTFOUND);
						if (SUCCEEDED(hr))
						{
							//如 Output： 4718592
							pInfoOutput->OnOutput(TEXT("FrameWindow CreateToolWinFlags"), V_I4(&varCreateToolWinFlags));
						}

						CComPtr<IVsUIHierarchyWindow> spVsUIHierarchyWindow2;
						COM_VERIFY(spVsWindowFrame->QueryViewInterface(IID_IVsUIHierarchyWindow, (void**)&spVsUIHierarchyWindow2));
						if (SUCCEEDED(hr) && spVsUIHierarchyWindow2)
						{
							//CFVsToolWindowToolbarDumper toolWindowToolBarDumper(spVsToolWindowToolbar, pInfoOutput, m_nIndent + 2);
						}
					}
					break;
				default:
					FTLASSERT(FALSE);
					break;
				}

				VSSETFRAMEPOS framePos;
				GUID guidRelativeTo = GUID_NULL;
				int x = 0, y = 0, cx = 0, cy = 0;

				// 在获取 "Macro Explorer" 时出现错误
				COM_VERIFY_EXCEPT1(spVsWindowFrame->GetFramePos(&framePos, &guidRelativeTo, &x, &y, &cx, &cy), E_UNEXPECTED);
				if (SUCCEEDED(hr))
				{
					FTL::CFStringFormater formater;
					formater.Format(TEXT(" winFramePos=0x%x, Pos=(%d,%d)-(%d,%d), %dx%d"), 
						framePos, x, y, x+cx, y+cy, cx, cy );
					pInfoOutput->OnOutput(TEXT("FramePos"), formater.GetString());
				}

				
#pragma warning(disable : 4245)
				static DWORD dwVSFPropIds[] = {
					VSFPROPID_Type,
					
					//Solution Explorer(vsWindowKindSolutionExplorer)
					//	可获取	IVsWindowPaneCommit/IVsPersistSolutionOpts/IVsUIHierarchyWindow2/
					//			IVsSelectionEvents/IVsSolutionEvents/IOleCommandTarget/IVsExtensibleObject/
					//			IVsBroadcastMessageEvents

					//Properties(vsWindowKindProperties)
					//	可获取	IVsWindowPaneCommit/IVsSelectionEvents/IOleCommandTarget/

					//Toolbox(vsWindowKindToolbox)
					//	可获取	IDropTarget/IVsToolbox3/IVsToolboxClipboardCycler/IVsHierarchyEvents/
					//			IVsToolbox/IVsSelectionEvents/IOleCommandTarget/IVsExtensibleObject/
					//			IVsBroadcastMessageEvents

					//Resource View(vsContextGuidResourceView)
					//	可获取	IDropTarget/IVsObjectManagerEvents/IVsSelectionEvents/IVsMultiItemSelect/
					//			IVsSolutionEvents/IOleCommandTarget/IVsBroadcastMessageEvents/
					//			IVsNavigationTool/IVsWindowFrameNotify

					//Macro Explorer(vsWindowKindMacroExplorer)
					//	可获取	IVsWindowPaneCommit/IVsUIHierarchyWindow2/IVsSelectionEvents/
					//			IVsSolutionEvents/IOleCommandTarget/IVsExtensibleObject/IVsBroadcastMessageEvents

					//Output(vsWindowKindOutput)
					//	可获取	IVsOutputWindow/IVsSolutionEvents/IOleCommandTarget/IVsTextView/IVsExtensibleObject/
					//			IVsFindTarget/IVsOutputWindow2/IVsUserContextUpdate/IVsWindowFrameNotify

					//Pending Changes(第三方 AnkhSvn )
					//	可获取  IDisposable/IVsWindowFrameNotify3/IProvideClassInfo/IConnectionPointContainer/
					//			IManagedObject/IVsWindowFrameNotify2/IVsBroadcastMessageEvents/IVsWindowFrameNotify

					//代码窗口，如 .cpp
					//  可获取  IVsCodeWindowEx/IVsHighlight/IVsTextBufferEvents/IVsSplitRoot/IVsDropdownBarManager/
					//			IServiceProvider/IVsTextEditorPropertyContainer/SVsCodeWindow/
					//			IConnectionPointContainer
					//			IVsToolboxUser/IVsTextBufferDataEvents/IVsBackForwardNavigation/IVsStatusbarUser
					//			IVsFindTarget2/IVsWindowFrameNotify2/IVsBroadcastMessageEvents/IVsWindowFrameNotify
					VSFPROPID_DocView,

					//可获取	IServiceProvider 接口
					VSFPROPID_SPFrame,

					//代码窗口，如 .cpp
					//	可获取	IVsPerPropertyBrowsing/IPerPropertyBrowsing/IVsCfgProvider2/IServiceProvider/IOleCommandTarget
					//			IVsExtensibleObject/IVsCfgProvider/IVsFileChangeEvents
					VSFPROPID_SPProjContext,

					VSFPROPID_Caption,
					VSFPROPID_WindowState,
					VSFPROPID_FrameMode,
					VSFPROPID_IsWindowTabbed,

					//可获取 IVsUserContext  接口
					VSFPROPID_UserContext,

					VSFPROPID_ViewHelper,
					VSFPROPID_ShortCaption,
					VSFPROPID_WindowHelpKeyword,
					VSFPROPID_WindowHelpCmdText,
					VSFPROPID_DocCookie,
					VSFPROPID_OwnerCaption,		//BSTR -- %3  (什么意思)
					VSFPROPID_EditorCaption,
					VSFPROPID_pszMkDocument,	//BSTR -- 可以获得文件的全路径

					//代码窗口，如 .cpp
					//	可获取	IPersistStream/IVsTextFind/IVsTextLayer2/IVsTextLines2/IVsLinkedUndoClient/IPersistFileCheckSum/
					//			IVsLastChangeTimeProvider/IPersistFileFormat/IVsTextImage/IVsExpansion/IVsFileBackup/
					//			IVsCommitGestureSink/IVsUserData/IVsPersistDocData2/IVsTextBufferEx/IVsBatchUpdate/
					//			IVsTextColorState/IVsCompoundAction/IVsCompoundViewChange/IOleCommandTarget
					//			IConnectionPointContainer/
					//			IVsFullTextScanner/IVsDocDataFileChangeControl/IVsSaveOptionsDlg/IVsTextReplaceEvents/
					//			IVsSupportCodeDefView/IVsTextStream/IVsPersistDocData/IVsTextScanner/IVsTextLines/
					//			IVsTextBufferTempInit/IVsTextImage2/IVsUndoRedoClusterWithCommitEvents/IObjectWithSite
					VSFPROPID_DocData,

					//代码窗口，如 .cpp
					//  可获取	IPersist/IVsPersistHierarchyItem/IPersistFileFormat/
					//			IVsHierarchy/IVsUIHierarchy/IVsHierarchyDeleteHandler/IVsUIHierWinClipboardHelperEvents/
					//			IVsHierarchyDropDataTarget/IVsHierarchyDropDataSource/IVsSupportItemHandoff/
					//			IVsProject3/IVsProjectResources/IVsProjectSpecificEditorMap2/IVsProjectSpecialFiles/IVsProjectCfgProvider
					//			IVsSccProject2/IVsCfgProvider2/IVsFileBackup/IVsAggregatableProject
					//			IVsDependencyProvider/IVsExtensibleObject/
					//			IVsUpdateSolutionEvents/IOleCommandTarget
					VSFPROPID_Hierarchy,
					VSFPROPID_ItemID,

					//代码窗口(如.cpp) 可以获得 vsContextGuidTextEditor
					VSFPROPID_CmdUIGuid,

					VSFPROPID_CreateDocWinFlags,

					//代码窗口(如.cpp)可获得 vsConstVCPlusPlusManagedFormEditorFactory
					VSFPROPID_guidEditorType,

					VSFPROPID_pszPhysicalView,

					//Output等获得 vsContextGuidTextEditor
					VSFPROPID_InheritKeyBindings,

					//代码窗口，如 .cpp
					//	可获取	IPersistStream/IPersistFileCheckSum/IVsLastChangeTimeProvider/IPersistFileFormat/IVsFileBackup
					//			IVsCommitGestureSink/IVsPersistDocData2/IVsDocDataFileChangeControl/IVsPersistDocData
					//			IVsTextFind/IVsTextLayer2/IVsTextLines2/IVsTextImage/IVsTextBufferEx/IVsBatchUpdate
					//			IVsFullTextScanner/IVsTextBuffer/IVsTextStream/IVsTextScanner/IVsSupportCodeDefView
					//			IVsTextLines/IVsTextBufferTempInit/
					//			IVsLinkedUndoClient/IVsExpansion/IVsUserData/IVsTextColorState/IVsTextImage2
					//			IConnectionPointContainer/IOleCommandTarget/IObjectWithSite
					//			IVsCompoundAction/IVsCompoundViewChange/IVsSaveOptionsDlg
					//			IVsTextReplaceEvents/IVsUndoRedoClusterWithCommitEvents
					VSFPROPID_RDTDocData,
					VSFPROPID_AltDocData,
					VSFPROPID_GuidPersistenceSlot,
					VSFPROPID_GuidAutoActivate,
					VSFPROPID_CreateToolWinFlags,

					//可获取	DTE::Window2/IVsSelectionEvents/LifetimeInformation 等接口
					VSFPROPID_ExtWindowObject,

					VSFPROPID_MultiInstanceToolNum,
					VSFPROPID_BitmapResource,
					VSFPROPID_BitmapIndex,

					//Solution Explorer -- 可获取	IVsToolWindowToolbarHost 等接口
					VSFPROPID_ToolbarHost,

					VSFPROPID_HideToolwinContainer,
				};
#pragma warning(default : 4245)

				pInfoOutput->OnOutput(TEXT("WindowFrame Property"));
				for (int i = 0; i < _countof(dwVSFPropIds); i++)
				{
					CComVariant varProperty;
					COM_VERIFY_EXCEPT1(spVsWindowFrame->GetProperty( dwVSFPropIds[i], &varProperty), DISP_E_MEMBERNOTFOUND);
					if (SUCCEEDED(hr))
					{
						COM_VERIFY(pInfoOutput->OnOutput(CFVSIPUtils::GetVSFPropIdIdString(dwVSFPropIds[i]), &varProperty));
					}
				}

				pInfoOutput->OnOutput(TEXT("WindowFrame GuidProperty"));
				for (int i = 0; i < _countof(dwVSFPropIds); i++)
				{
					GUID guidProperty = GUID_NULL;
					COM_VERIFY_EXCEPT1(spVsWindowFrame->GetGuidProperty(dwVSFPropIds[i], &guidProperty), DISP_E_MEMBERNOTFOUND);
					if (SUCCEEDED(hr) && !IsEqualGUID(guidProperty, GUID_NULL))
					{
						CComBSTR bstrGuid(guidProperty);
						COM_VERIFY(pInfoOutput->OnOutput(CFVSIPUtils::GetVSFPropIdIdString(dwVSFPropIds[i]),
							CFDTEUtil::GetDTEGuidStringInfo(bstrGuid)));
					}
				}

            }
        }
        return hr;
    }

	HRESULT CFVsCodeWindowDumper::GetObjInfo(IInformationOutput* pInfoOutput)
	{
		HRESULT hr = E_POINTER;
		COM_VERIFY(pInfoOutput->OutputInfoName(TEXT("VsCodeWindow")));
		if (m_pObj)
		{
			//可QI出 
			//  IVsCodeWindowEx/IVsSplitRoot/IVsDropdownBarManager/IServiceProvider/SVsCodeWindow/IVsToolboxUser/
			//	IVsBackForwardNavigation/IVsStatusbarUser/IVsFindTarget2/
			//	IVsTextBufferEvents/IVsTextBufferDataEvents/IVsBroadcastMessageEvents/
			//	IVsWindowFrameNotify2/IConnectionPointContainer/IOleCommandTarget
			//	IVsHighlight/IVsTextEditorPropertyContainer/
			CComQIPtr<IVsCodeWindow>     spVsCodeWindow(m_pObj);
			if (spVsCodeWindow)
			{
				CComBSTR bstrEditorCaptionNotReadOnly;
				COM_VERIFY(spVsCodeWindow->GetEditorCaption(ROSTATUS_NotReadOnly, &bstrEditorCaptionNotReadOnly));
				pInfoOutput->OnOutput(TEXT("EditorCaption NotReadOnly"), bstrEditorCaptionNotReadOnly);

				CComBSTR bstrEditorCaptionReadOnly;
				COM_VERIFY(spVsCodeWindow->GetEditorCaption(ROSTATUS_ReadOnly, &bstrEditorCaptionReadOnly));
				pInfoOutput->OnOutput(TEXT("EditorCaption ReadOnly"), bstrEditorCaptionReadOnly);

				CLSID viewClassID = CLSID_NULL;
				COM_VERIFY(spVsCodeWindow->GetViewClassID(&viewClassID));
				pInfoOutput->OnOutput(TEXT("ViewClassID"), CFDTEUtil::GetDTEGuidStringInfo(viewClassID));

				CComPtr<IVsTextLines> spVsTextLines;
				COM_VERIFY(spVsCodeWindow->GetBuffer(&spVsTextLines));
				CFVsTextLinesDumper vsTextLinesDumper(spVsTextLines, pInfoOutput, m_nIndent + 2);

				CComPtr<IVsTextView> spPrimaryView;
				COM_VERIFY(spVsCodeWindow->GetPrimaryView(&spPrimaryView));
				COM_DETECT_INTERFACE_FROM_REGISTER(spPrimaryView);

				pInfoOutput->OnOutput(TEXT("PrimaryView"));
				CFVsTextViewDumper primaryViewDumper(spPrimaryView, pInfoOutput, m_nIndent + 2);

				CComPtr<IVsTextView> spSecondaryView;
				COM_VERIFY_EXCEPT1(spVsCodeWindow->GetSecondaryView(&spSecondaryView), E_FAIL);
				if (SUCCEEDED(hr) && spSecondaryView)
				{
					pInfoOutput->OnOutput(TEXT("SecondaryView"));
					CFVsTextViewDumper secondaryViewDumper(spSecondaryView, pInfoOutput, m_nIndent + 2);
				}
			}
		}
		return hr;
	}

	HRESULT CFVsEnumTextViewsDumper::GetObjInfo(IInformationOutput* pInfoOutput)
	{
		HRESULT hr = E_POINTER;
		COM_VERIFY(pInfoOutput->OutputInfoName(TEXT("VsEnumTextViews")));

		if (m_pObj)
		{
			CComQIPtr<IVsEnumTextViews>     spVsEnumTextViews(m_pObj);
			if (spVsEnumTextViews)
			{
				COM_VERIFY(spVsEnumTextViews->Reset());

				CComPtr<IVsTextView> spVsTextView;
				ULONG ulFetched = 0;

				COM_VERIFY_EXCEPT1(spVsEnumTextViews->Next(1, &spVsTextView, &ulFetched), S_FALSE);
				while (SUCCEEDED(hr) && ulFetched == 1)
				{
					CFVsTextViewDumper vsTextViewDumper(spVsTextView, pInfoOutput, m_nIndent + 2);

					spVsTextView.Release();
					COM_VERIFY_EXCEPT1(spVsEnumTextViews->Next(1, &spVsTextView, &ulFetched), S_FALSE);
				}
				hr = S_OK;
			}
		}
		return hr;
	}

	HRESULT CFVsTextViewDumper::GetObjInfo(IInformationOutput* pInfoOutput)
	{
		HRESULT hr = E_POINTER;
		COM_VERIFY(pInfoOutput->OutputInfoName(TEXT("VsTextView")));

		if (m_pObj)
		{
			//可以QI出	IVsHighlight/IVsTextViewIntellisenseHostProvider/IVsPersistSolutionOpts/IVsLayeredTextView/
			//			IVsEditorGoBackLocations/IVsProvideUserContext/IVsUserContextUpdate/IVsTextEditorPropertyCategoryContainer/
			//			IConnectionPointContainer/IVsCompoundAction/IVsToolboxUser/IVsBackForwardNavigation/
			//			IVsLineAttributes/IVsStatusbarUser/IVsFindTarget2/IVsTextViewEx/IVsWindowFrameNotify2/
			//			IVsReadOnlyViewNotification/IVsWindowFrameNotify/IVsThreadSafeTextView 
			CComQIPtr<IVsTextView>     spVsTextView(m_pObj);
			if (spVsTextView)
			{
				FTL::CFStringFormater formater;

				//获取窗体(如 CodeWindow)的句柄 -- DTE::Window 不能获取
				HWND hWnd = spVsTextView->GetWindowHandle();
				COM_VERIFY(pInfoOutput->OnOutput(TEXT("WindowHandle"), hWnd));

				long nLine = 0;
				ViewCol nColumn = 0;
				COM_VERIFY(spVsTextView->GetCaretPos(&nLine, &nColumn));

				COM_VERIFY(formater.Format(TEXT(" Line %d, Col %d"), nLine, nColumn));
				COM_VERIFY(pInfoOutput->OnOutput(TEXT("CaretPos"), formater.GetString()));

				TextSpan selectionSpan = {0};
				COM_VERIFY_EXCEPT1(spVsTextView->GetSelectionSpan(&selectionSpan), S_FALSE);
				if (SUCCEEDED(hr))
				{
					formater.Reset();
					formater.Format(TEXT("TextSpan From [%d, %d] To [%d, %d]"), selectionSpan.iStartLine, 
						selectionSpan.iStartIndex, selectionSpan.iEndLine, selectionSpan.iEndIndex);
					COM_VERIFY(pInfoOutput->OnOutput(TEXT("SelectionSpan"), formater.GetString()));
				}
				
				TextSelMode selMode = spVsTextView->GetSelectionMode();
				COM_VERIFY(pInfoOutput->OnOutput(TEXT("SelectionMode"), (long)selMode));

				CComBSTR bstrSelectedText;
				COM_VERIFY(spVsTextView->GetSelectedText(&bstrSelectedText));
				if (SUCCEEDED(hr) && NULL != bstrSelectedText)
				{
					COM_VERIFY(pInfoOutput->OnOutput(TEXT("SelectedText"), bstrSelectedText));
				}

				CComPtr<IDataObject>	spSelectionDataObject;
				COM_VERIFY_EXCEPT1(spVsTextView->GetSelectionDataObject(&spSelectionDataObject), E_FAIL);
				if (SUCCEEDED(hr) && spSelectionDataObject)
				{
					COM_DETECT_INTERFACE_FROM_REGISTER(spSelectionDataObject);
				}
			}
		}
		return hr;
	}

	HRESULT CFVsEnumTextBuffersDumper::GetObjInfo(IInformationOutput* pInfoOutput)
	{
		HRESULT hr = E_POINTER;
		COM_VERIFY(pInfoOutput->OutputInfoName(TEXT("VsEnumTextBuffers")));

		if (m_pObj)
		{
			CComQIPtr<IVsEnumTextBuffers>     spVsEnumTextBuffers(m_pObj);
			if (spVsEnumTextBuffers)
			{
				COM_VERIFY(spVsEnumTextBuffers->Reset());

				ULONG ulFetched = 0;
				CComPtr<IVsTextBuffer> spVsTextBuffer;
				while (SUCCEEDED(spVsEnumTextBuffers->Next(1, &spVsTextBuffer, &ulFetched)) && ulFetched > 0)
				{
					FTLASSERT(1 == ulFetched);
					CFVsTextBufferDumper vsTextViewDumper(spVsTextBuffer, pInfoOutput, m_nIndent + 2);
					spVsTextBuffer.Release();
				}
				hr = S_OK;
			}
		}
		return hr;
	}

	HRESULT CFVsTextBufferDumper::GetObjInfo(IInformationOutput* pInfoOutput)
	{
		HRESULT hr = E_POINTER;
		COM_VERIFY(pInfoOutput->OutputInfoName(TEXT("VsTextBuffer")));

		if (m_pObj)
		{
			CComQIPtr<IVsTextBuffer>     spVsTextBuffer(m_pObj);
			if (spVsTextBuffer)
			{
				DWORD dwStateFlags = 0;
				COM_VERIFY(spVsTextBuffer->GetStateFlags(&dwStateFlags));
				pInfoOutput->OnOutput(TEXT("StateFlags"), (LONG)dwStateFlags);

				LONG nLineCount = 0;
				COM_VERIFY(spVsTextBuffer->GetLineCount(&nLineCount));
				pInfoOutput->OnOutput(TEXT("LineCount"), nLineCount);

				LONG nNumberCharsLastLine = 0;
				COM_VERIFY(spVsTextBuffer->GetLengthOfLine(nLineCount - 1, &nNumberCharsLastLine));
				pInfoOutput->OnOutput(TEXT("Last Line Char Numbers"), nNumberCharsLastLine);
				//可再使用 IVsTextLines::GetLineText(0, 0, nLineCount - 1, nNumberCharsLastLine ) 来获得全部文本

				LONG nSize = 0;
				COM_VERIFY(spVsTextBuffer->GetSize(&nSize));
				pInfoOutput->OnOutput(TEXT("Size"), nSize);

				GUID guidLanguageServiceID = GUID_NULL;
				COM_VERIFY(spVsTextBuffer->GetLanguageServiceID(&guidLanguageServiceID));
				CComBSTR bstrGuidLanguageServiceID(guidLanguageServiceID);
				pInfoOutput->OnOutput(TEXT("LanguageServiceID"), CFDTEUtil::GetDTEGuidStringInfo(bstrGuidLanguageServiceID));
			}
		}
		return hr;
	}

	HRESULT CFVsTextLinesDumper::GetObjInfo(IInformationOutput* pInfoOutput)
	{
		HRESULT hr = E_POINTER;
		COM_VERIFY(pInfoOutput->OutputInfoName(TEXT("VsTextLines")));

		if (m_pObj)
		{
			//可QI出 
			//	IPersistStream/IPersistFileFormat/IPersistFileCheckSum/IVsFileBackup/IVsLastChangeTimeProvider/
			//	IVsTextFind/IVsTextLines2/IVsTextLayer2/IVsTextImage2/IVsTextStream/IVsTextBufferEx/IVsTextBuffer/IVsTextBufferTempInit
			//	IVsLinkedUndoClient/IVsCommitGestureSink/IVsUserData/IVsDocDataFileChangeControl/IVsPersistDocData
			//	IVsExpansion/IVsPersistDocData2/IVsBatchUpdate/IVsCompoundAction/IVsCompoundViewChange
			//	IVsTextReplaceEvents/IVsUndoRedoClusterWithCommitEvents/
			//	IConnectionPointContainer/IOleCommandTarget/IObjectWithSite
			//	IVsFullTextScanner/IVsTextScanner/IVsSaveOptionsDlg/IVsSupportCodeDefView/IVsTextColorState/
			CComQIPtr<IVsTextLines>     spVsTextLines(m_pObj);
			if (spVsTextLines)
			{
				CComQIPtr<IVsTextBuffer> spVsTextBuffer(spVsTextLines);
				CFVsTextBufferDumper textBufferDumper(spVsTextBuffer, pInfoOutput, m_nIndent + 2);
				
				LONG nLineCount = 0;
				COM_VERIFY(spVsTextLines->GetLineCount(&nLineCount));
				if (SUCCEEDED(hr))
				{
					//LONG nNumberCharsLastLine = 0;
					//COM_VERIFY(spVsTextBuffer->GetLengthOfLine(nLineCount - 1, &nNumberCharsLastLine));

					CComPtr<IVsEnumLineMarkers> spVsEnumLineMarkers;

					long nMakerType = 0; //枚举出当前 IVsTextLines 中所有的 TextMarker,并查看信息
					COM_VERIFY(spVsTextLines->EnumMarkers(0, 0, nLineCount, 0, nMakerType, EM_ALLTYPES | EM_SORTPRIORITY, &spVsEnumLineMarkers));
					if (SUCCEEDED(hr) && spVsEnumLineMarkers)
					{
						CFVsEnumLineMarkersDumper vsEnumLineMarkersDumper(spVsEnumLineMarkers, pInfoOutput, m_nIndent + 2);
					}
				}
			}
		}
		return hr;
	}
	

	HRESULT CFVsEnumLineMarkersDumper::GetObjInfo(IInformationOutput* pInfoOutput)
	{
		HRESULT hr = E_POINTER;
		COM_VERIFY(pInfoOutput->OutputInfoName(TEXT("VsEnumLineMarkers")));

		if (m_pObj)
		{
			//可QI出
			//	IVsEnumStreamMarkers/IVsEnumLineMarkers/IVsEnumLayerMarkers
			CComQIPtr<IVsEnumLineMarkers>     spVsEnumLineMarkers(m_pObj);
			if (spVsEnumLineMarkers)
			{
				LONG nMakerCount = 0;
				COM_VERIFY(spVsEnumLineMarkers->GetCount(&nMakerCount));
				pInfoOutput->OnOutput(TEXT("LineMarker Count"), nMakerCount);

				COM_VERIFY(spVsEnumLineMarkers->Reset());

				for(LONG nMarkerIndex = 1; nMarkerIndex <= nMakerCount; ++nMarkerIndex)
				{
					CComPtr<IVsTextLineMarker>	spVsTextLineMarker;
					COM_VERIFY(spVsEnumLineMarkers->Next(&spVsTextLineMarker));
					if (SUCCEEDED(hr) && spVsTextLineMarker)
					{
						pInfoOutput->OnOutput(TEXT("LineMarker Index"), nMarkerIndex);
						CFVsTextLineMarkerDumper vsTextLineMarkerDumper(spVsTextLineMarker, pInfoOutput, m_nIndent + 2);
					}
				}
				hr = S_OK;
			}
		}
		return hr;
	}

	HRESULT CFVsTextMarkerDumper::GetObjInfo(IInformationOutput* pInfoOutput)
	{
		HRESULT hr = E_POINTER;
		COM_VERIFY(pInfoOutput->OutputInfoName(TEXT("VsTextMarker")));
		if (m_pObj)
		{
			//可以QI出 IVsTextStreamMarker/IVsTextLineMarkerEx/IVsTextLayerMarker/IVsTextLineMarker/IVsTextMarker/IVsTextTrackingPoint 等接口
			CComQIPtr<IVsTextMarker>     spVsTextMarker(m_pObj);
			if (spVsTextMarker)
			{
				//IVsMergeableUIItem ?
				COM_DETECT_INTERFACE_FROM_REGISTER(spVsTextMarker);
				CComQIPtr<IVsMergeableUIItem> spVsMergeableUIItem(spVsTextMarker);
				if (spVsMergeableUIItem)
				{
					CFVsMergeableUIItemDumper vsMergeableUIItemDumper(spVsMergeableUIItem, pInfoOutput, m_nIndent + 2);
				}

				LONG nMarkerType = 0;
				COM_VERIFY(spVsTextMarker->GetType(&nMarkerType));
				pInfoOutput->OnOutput(TEXT("Type"), CFVSIPUtils::GetTextMakerTypeString(nMarkerType));

				FTL::CFStringFormater strFormater;
				DWORD dwVisualStyle = 0;
				COM_VERIFY(spVsTextMarker->GetVisualStyle(&dwVisualStyle));
				pInfoOutput->OnOutput(TEXT("VisualStyle"), CFVSIPUtils::GetMarkerVisualFlagsString(strFormater, dwVisualStyle));

				CComBSTR bstrTipText;
				hr = spVsTextMarker->GetTipText(&bstrTipText);
				if (SUCCEEDED(hr))
				{
					pInfoOutput->OnOutput(TEXT("TipText"), &bstrTipText);
				}

				DWORD dwBehavior = 0;
				COM_VERIFY(spVsTextMarker->GetBehavior(&dwBehavior));
				strFormater.Reset();
				pInfoOutput->OnOutput(TEXT("Behavior"), CFVSIPUtils::GetMarkerBehaviorFlagsString(strFormater, dwBehavior));

				LONG nPriorityIndex = 0;
				COM_VERIFY(spVsTextMarker->GetPriorityIndex(&nPriorityIndex));
				pInfoOutput->OnOutput(TEXT("PriorityIndex"), nPriorityIndex);
			}
		}
		return hr;
	}

	HRESULT CFVsTextLineMarkerDumper::GetObjInfo(IInformationOutput* pInfoOutput)
	{
		HRESULT hr = E_POINTER;
		COM_VERIFY(pInfoOutput->OutputInfoName(TEXT("VsTextLineMarker")));
		if (m_pObj)
		{
			//可QI出
			//	IVsTextStreamMarker/IVsTextLineMarkerEx/IVsTextLayerMarker/IVsTextLineMarker/IVsTextMarker/IVsTextTrackingPoint
			CComQIPtr<IVsTextLineMarker>     spVsTextLineMarker(m_pObj);
			if (spVsTextLineMarker)
			{
				CFVsTextMarkerDumper vsTextMakerDumper(spVsTextLineMarker, pInfoOutput, m_nIndent + 2);

				TextSpan CurrentSpan = {0};
				COM_VERIFY(spVsTextLineMarker->GetCurrentSpan(&CurrentSpan));
				if (SUCCEEDED(hr))
				{
					FTL::CFStringFormater formater;
					formater.Format(TEXT(" From [%d, %d] To [%d, %d]"), CurrentSpan.iStartLine, 
						CurrentSpan.iStartIndex, CurrentSpan.iEndLine, CurrentSpan.iEndIndex);
					COM_VERIFY(pInfoOutput->OnOutput(TEXT("CurrentSpan"), formater.GetString()));
				}
			}
		}
		return hr;
	}

	HRESULT CFVsMergeableUIItemDumper::GetObjInfo(IInformationOutput* pInfoOutput)
	{
		HRESULT hr = E_POINTER;
		COM_VERIFY(pInfoOutput->OutputInfoName(TEXT("VsMergeableUIItem")));

		if (m_pObj)
		{
			CComQIPtr<IVsMergeableUIItem>     spVsMergeableUIItem(m_pObj);
			if (spVsMergeableUIItem)
			{
				CComBSTR bstrDisplayName;
				COM_VERIFY(spVsMergeableUIItem->GetDisplayName(&bstrDisplayName));
				pInfoOutput->OnOutput(TEXT("DisplayName"), &bstrDisplayName);

				CComBSTR bstrCanonicalName;
				COM_VERIFY(spVsMergeableUIItem->GetCanonicalName(&bstrCanonicalName));
				pInfoOutput->OnOutput(TEXT("CanonicalName"), &bstrCanonicalName);

				CComBSTR bstrDescription;
				COM_VERIFY(spVsMergeableUIItem->GetDescription(&bstrDescription));
				pInfoOutput->OnOutput(TEXT("Description"), &bstrDescription);

				LONG nMergingPriority = 0;
				COM_VERIFY(spVsMergeableUIItem->GetMergingPriority(&nMergingPriority));
				COM_VERIFY(pInfoOutput->OnOutput(TEXT("MergingPriority"), nMergingPriority));
			}
		}
		return hr;
	}

	
	HRESULT CFVsUIHierarchyDumper::GetObjInfo(IInformationOutput* pInfoOutput)
	{
		HRESULT hr = E_POINTER;
		COM_VERIFY(pInfoOutput->OutputInfoName(TEXT("VsUIHierarchy")));

		if (m_pObj)
		{
			CComQIPtr<IVsUIHierarchy>     spVsUIHierarchy(m_pObj);
			if (spVsUIHierarchy)
			{

			}
		}
		return hr;
	}

	HRESULT CFVsIntellisenseHostDumper::GetObjInfo(IInformationOutput* pInfoOutput)
	{
		HRESULT hr = E_POINTER;
		COM_VERIFY(pInfoOutput->OutputInfoName(TEXT("VsIntellisenseHost")));
		if (m_pObj)
		{
			//可以QI出
			//	IVsIntellisenseHost/IVsTextViewIntellisenseHost/IVsIntellisenseOptions/IOleCommandTarget
			CComQIPtr<IVsIntellisenseHost> spVsIntellisenseHost(m_pObj);
			if (spVsIntellisenseHost)
			{
				CFStringFormater strFormater;

				DWORD dwHostFlags = 0;
				COM_VERIFY(spVsIntellisenseHost->GetHostFlags(&dwHostFlags));
				COM_VERIFY(pInfoOutput->OnOutput(TEXT("HostFlags"), dwHostFlags));

				HWND hWndHost = NULL;
				COM_VERIFY(spVsIntellisenseHost->GetHostWindow(&hWndHost));
				COM_VERIFY(pInfoOutput->OnOutput(TEXT("HostWindow"), hWndHost));

				CComBSTR bstrSubjectText;
				COM_VERIFY_EXCEPT1(spVsIntellisenseHost->GetSubjectText(&bstrSubjectText), E_NOTIMPL);
				if (SUCCEEDED(hr))
				{
					COM_VERIFY(pInfoOutput->OnOutput(TEXT("SubjectText"), &bstrSubjectText));
				}

				LONG nSubjectCaretPos = 0;
				COM_VERIFY_EXCEPT1(spVsIntellisenseHost->GetSubjectCaretPos(&nSubjectCaretPos), E_NOTIMPL);
				if (SUCCEEDED(hr))
				{
					COM_VERIFY(pInfoOutput->OnOutput(TEXT("SubjectCaretPos"), nSubjectCaretPos));
				}

				LONG nSubjectSelectionLine = 0, nSubjectSelectionIndex = 0;
				COM_VERIFY_EXCEPT1(spVsIntellisenseHost->GetSubjectSelection(&nSubjectSelectionLine, &nSubjectSelectionIndex), E_NOTIMPL);
				if (SUCCEEDED(hr))
				{
					strFormater.Format(TEXT("[%d, %d]"), nSubjectSelectionLine, nSubjectSelectionIndex);
					COM_VERIFY(pInfoOutput->OnOutput(TEXT("SubjectSelection"), strFormater.GetString()));
				}

				TextSpan contextFocalPoint = {0};
				LONG nLen = 0;
				COM_VERIFY(spVsIntellisenseHost->GetContextFocalPoint(&contextFocalPoint, &nLen));
				strFormater.Format(TEXT("TextSpan From [%d,%d] To [%d, %d], Len=%d"), contextFocalPoint.iStartLine, contextFocalPoint.iStartIndex, 
					contextFocalPoint.iEndLine, contextFocalPoint.iEndIndex, nLen);
				COM_VERIFY(pInfoOutput->OnOutput(TEXT("ContextFocalPoint"), strFormater.GetString()));

				LONG nContextCaretLine = 0, nContextCaretIndex = 0;
				COM_VERIFY(spVsIntellisenseHost->GetContextCaretPos(&nContextCaretLine, &nContextCaretIndex));
				strFormater.Format(TEXT("[%d, %d]"), nContextCaretLine, nContextCaretIndex);
				COM_VERIFY(pInfoOutput->OnOutput(TEXT("ContextCaretPos"), strFormater.GetString()));

				CRect rcSmartTag;
				rcSmartTag.SetRectEmpty();
				COM_VERIFY_EXCEPT1(spVsIntellisenseHost->GetSmartTagRect(&rcSmartTag), E_FAIL);
				if (SUCCEEDED(hr))
				{
					strFormater.Format(TEXT("[%d,%d]-[%d,%d] {%dx%d}"), 
						rcSmartTag.left, rcSmartTag.top,
						rcSmartTag.right, rcSmartTag.bottom,
						rcSmartTag.Width(), rcSmartTag.Height());
					COM_VERIFY(pInfoOutput->OnOutput(TEXT("SmartTagRect"), strFormater.GetString()));
				}
			}
		}
		return hr;
	}


	HRESULT CFVsTextViewIntellisenseHostDumper::GetObjInfo(IInformationOutput* pInfoOutput)
	{
		HRESULT hr = E_POINTER;
		COM_VERIFY(pInfoOutput->OutputInfoName(TEXT("VsTextViewIntellisenseHost")));
		if (m_pObj)
		{
			//可以QI出 
			//	IVsIntellisenseHost/IVsTextViewIntellisenseHost/IVsIntellisenseOptions/IOleCommandTarget 等
			CComQIPtr<IVsTextViewIntellisenseHost> spVsTextViewIntellisenseHost(m_pObj);
			if (spVsTextViewIntellisenseHost)
			{
				CFVsIntellisenseHostDumper	vsIntellisenseHostDumper(spVsTextViewIntellisenseHost, pInfoOutput, m_nIndent + 2);
			}
		}
		return hr;
	}

	HRESULT CFVsResourceManagerDumper::GetObjInfo(IInformationOutput* pInfoOutput)
	{
		HRESULT hr = E_POINTER;
		COM_VERIFY(pInfoOutput->OutputInfoName(TEXT("VsResourceManager")));
		if (m_pObj)
		{
			//注意：不是 SVsResourceManager, C# 中的语法为 (IVsResourceManager)GetService(typeof(SVsResourceManager));
			//  只能QI到 IVsResourceManager/ISupportErrorInfo
			CComQIPtr<IVsResourceManager>     spVsResourceManager(m_pObj);
			if (spVsResourceManager)
			{
				//C# 中的语法
				//Guid packageGuid = this.GetType().GUID;
				//int hr = resourceManager.LoadResourceString(ref packageGuid, -1, resourceName, out resourceValue);

			}
		}
		return hr;
	}

	HRESULT CFLocalRegistryDumper::GetObjInfo(IInformationOutput* pInfoOutput)
	{
		HRESULT hr = E_POINTER;
		COM_VERIFY(pInfoOutput->OutputInfoName(TEXT("LocalRegistry")));
		if (m_pObj)
		{
			//CComQIPtr<ILocalRegistry>     spLocalRegistry(m_pObj);
			CComQIPtr<ILocalRegistry4>     spLocalRegistry4(m_pObj);
			if (spLocalRegistry4)
			{
				VSLOCALREGISTRYROOTHANDLE hLocalRegistryRoot = RegHandle_Invalid;
				CComBSTR bstrPath;
				COM_VERIFY(spLocalRegistry4->GetLocalRegistryRootEx(RegType_Configuration, &hLocalRegistryRoot, &bstrPath));

				//VSLOCALREGISTRYROOTHANDLE_TO_HKEY(hLocalRegistryRoot)
				COM_VERIFY(pInfoOutput->OnOutput(TEXT("ConfigurationRot"), &bstrPath));
			}
		}
		return hr;
	}

#endif //FTL_DEBUG
}

#endif //FTL_VSIP_HELPER_HPP